import { ActionType, ApiEndpointId, ApplicationBundleData, CollectionName, IntegrationId, QueryName, SchedulerId, ServiceFunctionName, TriggerId, WebhookId } from '@squidcloud/common';
declare class Meta {
    data: ApplicationBundleData;
    /**
     * @secureDatabase("read", "ExampleIntegration")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   databases: {
     *     ExampleIntegration: {
     *       security: {
     *         read: ['MyService:myMethod']
     *       }
     *     }
     *   }
     * }
     */
    secureDatabase(type: ActionType, serviceFunction: ServiceFunctionName, integrationId?: IntegrationId): void;
    /**
     * @secureCollection("ExampleCollection", "read", "ExampleIntegration")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   databases: {
     *     ExampleIntegration: {
     *       collections: {
     *         ExampleCollection: {
     *           security: {
     *             read: ['MyService:myMethod']
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     */
    secureCollection(collectionName: CollectionName, type: ActionType, serviceFunction: ServiceFunctionName, integrationId?: IntegrationId): void;
    /**
     * @secureApi("ExampleIntegration", "myEndpoint")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   apis: {
     *     ExampleIntegration: {
     *       myEndpoint: {
     *         security: ['MyService:myMethod']
     *       }
     *     }
     *   }
     * }
     */
    secureApi(integrationId: IntegrationId, endpointId: ApiEndpointId | undefined, serviceFunction: ServiceFunctionName): void;
    /**
     * @secureGraphQL("ExampleIntegration")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   graphql: {
     *     ExampleIntegration: {
     *       security: ['MyService:myMethod']
     *     }
     *   }
     * }
     */
    secureGraphQL(integrationId: IntegrationId, serviceFunction: ServiceFunctionName): void;
    /**
     * @transformDatabase(""read", "ExampleIntegration")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   databases: {
     *     ExampleIntegration: {
     *       transform: {
     *         read: {
     *           type: "read"
     *           functionName: "MyService:myMethod"
     *         }
     *       }
     *     }
     *   }
     * }
     */
    transformDatabase(type: ActionType, serviceFunction: ServiceFunctionName, integrationId?: IntegrationId): void;
    /**
     * @transformCollection("ExampleCollection", "read", "ExampleIntegration")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   databases: {
     *     ExampleIntegration: {
     *       collections: {
     *         ExampleCollection: {
     *           transform: {
     *             read: {
     *               type: "read"
     *               functionName: "MyService:myMethod"
     *             }
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     */
    transformCollection(collectionName: CollectionName, type: ActionType, serviceFunction: ServiceFunctionName, integrationId?: IntegrationId): void;
    /**
     * @executable()
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   executables: {
     *     myExecutable: {
     *       serviceName: "MyService:myMethod",
     *     }
     *   }
     * }
     */
    executable(serviceFunction: ServiceFunctionName): void;
    /**
     * @trigger("my-trigger", "ExampleCollection", "ExampleIntegration")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   triggers: {
     *     "my-trigger": {
     *       integrationId: "ExampleIntegration"
     *       collectionName: "ExampleCollection"
     *       functionName: "MyService:myMethod",
     *     }
     *   }
     * }
     */
    trigger(id: TriggerId, collectionName: CollectionName, serviceFunction: ServiceFunctionName, integrationId?: IntegrationId): void;
    /**
     * @scheduler("my-scheduler", "CronExpression")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   schedulers: {
     *     "my-scheduler", {
     *       cronExpression: "CronExpression"
     *       functionName: "MyService:myMethod",
     *     }
     *   }
     * }
     */
    scheduler(id: SchedulerId, cronExpression: string, serviceFunction: ServiceFunctionName): void;
    /**
     * @webhook("my-webhook")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   webhooks: {
     *     "my-webhook", {
     *       functionName: "MyService:myMethod",
     *     }
     *   }
     * }
     */
    webhook(id: WebhookId, serviceFunction: ServiceFunctionName): void;
    /**
     * @namedQuery('exampleIntegration', 'my-query')
     * static  myQuery = "select * from my-table where id = ${id}";
     *
     * Applying the decorator above to the myQuery static string in MyService
     * class will generate the following metadata:
     *
     *
     *
     * data: {
     *   namedQueries: {
     *     "exampleIntegration", {
     *       my-query: {
     *         queryString: "select * from my-table where id = $id"
     *       }
     *     }
     *   }
     * }
     */
    namedQuery(integrationId: IntegrationId, name: QueryName, queryString: string): void;
    /**
     * @secureNamedQuery("exampleIntegration", "queryName")
     *
     * Applying the decorator above to the myMethod method on the MyService
     * class will generate the following metadata:
     *
     * data: {
     *   namedQueries: {
     *     exampleIntegration: {
     *     queryName: {
     *       security: MyService:myMethod
     *     }
     *   }
     * }
     */
    secureNamedQuery(integrationId: IntegrationId, name: QueryName, serviceFunction: ServiceFunctionName): void;
}
export declare const metadata: Meta;
export {};
