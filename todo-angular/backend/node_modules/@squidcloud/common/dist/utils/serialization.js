"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recodeValue = exports.decodeValueForMapping = exports.encodeValueForMapping = exports.deserializeObj = exports.serializeObj = exports.normalizeJsonAsString = void 0;
const bson_1 = require("bson");
function sortKeys(json) {
    if (Array.isArray(json)) {
        return json.map((o) => sortKeys(o));
    }
    if (typeof json !== 'object' || json === null || json instanceof Date) {
        return json;
    }
    const keys = Object.keys(json);
    const result = {};
    keys.sort().forEach((key) => {
        result[key] = sortKeys(json[key]);
    });
    return result;
}
function normalizeJsonAsString(json) {
    return serializeObj(sortKeys(json));
}
exports.normalizeJsonAsString = normalizeJsonAsString;
function serializeObj(obj) {
    try {
        return bson_1.EJSON.stringify(obj);
    }
    catch (e) {
        console.error('Unable to serialize object', e, '\n\nSTACK:', new Error().stack);
        throw e;
    }
}
exports.serializeObj = serializeObj;
function deserializeObj(serializedObj) {
    return bson_1.EJSON.parse(serializedObj);
}
exports.deserializeObj = deserializeObj;
function encodeValueForMapping(value) {
    if (value === undefined)
        throw new Error('INVALID_ENCODE_VALUE');
    return btoa(JSON.stringify(value));
}
exports.encodeValueForMapping = encodeValueForMapping;
function decodeValueForMapping(encodedString) {
    return JSON.parse(atob(encodedString));
}
exports.decodeValueForMapping = decodeValueForMapping;
function recodeValue(value) {
    return decodeValueForMapping(encodeValueForMapping(value));
}
exports.recodeValue = recodeValue;
//# sourceMappingURL=serialization.js.map