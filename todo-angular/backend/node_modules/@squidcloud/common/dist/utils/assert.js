"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTruthy = exports.notNullish = exports.truthy = exports.assertValidateTruthy = exports.assertNotNullish = exports.assertTruthy = void 0;
const http_status_enum_1 = require("../http-status.enum");
const nullish_1 = require("./nullish");
const validation_1 = require("./validation");
function assertTruthy(value, error) {
    if (value) {
        return;
    }
    const messageOrObject = typeof error === 'function' ? error() : error;
    if (messageOrObject instanceof Error) {
        throw messageOrObject;
    }
    else {
        throw new Error(messageOrObject !== null && messageOrObject !== void 0 ? messageOrObject : 'Assertion error');
    }
}
exports.assertTruthy = assertTruthy;
function assertNotNullish(value, error) {
    if ((0, nullish_1.isNotNullish)(value))
        return;
    const messageOrObject = typeof error === 'function' ? error() : error;
    if (messageOrObject instanceof Error) {
        throw messageOrObject;
    }
    else {
        throw new Error(messageOrObject !== null && messageOrObject !== void 0 ? messageOrObject : 'Assertion error');
    }
}
exports.assertNotNullish = assertNotNullish;
function assertValidateTruthy(value, message, statusCode = http_status_enum_1.HttpStatus.BAD_REQUEST, details) {
    assertTruthy(value, () => new validation_1.ValidationError(message, statusCode, details));
}
exports.assertValidateTruthy = assertValidateTruthy;
function truthy(value, error) {
    assertTruthy(value, error);
    return value;
}
exports.truthy = truthy;
function notNullish(value, error) {
    assertNotNullish(value, error);
    return value;
}
exports.notNullish = notNullish;
function validateTruthy(value, message, statusCode = http_status_enum_1.HttpStatus.BAD_REQUEST, details) {
    return truthy(value, () => new validation_1.ValidationError(message, statusCode, details));
}
exports.validateTruthy = validateTruthy;
//# sourceMappingURL=assert.js.map