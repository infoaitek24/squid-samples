"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dateToTimeString = exports.msPastMidnightToTimeString = exports.debeziumStringToInterval = exports.base64ToBinary = exports.base64ToString = exports.isoStringToDate = exports.msToDate = exports.daysPastEpochToDate = exports.moneyStringToNumber = exports.JSONToString = exports.stringToJSON = exports.stringToBuffer = exports.bufferToString = exports.numberToString = exports.stringToNumber = exports.intToBoolean = exports.booleanToInt = exports.unchanged = void 0;
function unchanged(any) {
    return any;
}
exports.unchanged = unchanged;
function booleanToInt(boolean) {
    return boolean ? 1 : 0;
}
exports.booleanToInt = booleanToInt;
function intToBoolean(int) {
    return !!int;
}
exports.intToBoolean = intToBoolean;
function stringToNumber(string) {
    return Number(string);
}
exports.stringToNumber = stringToNumber;
function numberToString(number) {
    return number + '';
}
exports.numberToString = numberToString;
function bufferToString(buffer) {
    return buffer.toString();
}
exports.bufferToString = bufferToString;
function stringToBuffer(string) {
    return Buffer.from(string);
}
exports.stringToBuffer = stringToBuffer;
function stringToJSON(string) {
    return JSON.parse(string);
}
exports.stringToJSON = stringToJSON;
function JSONToString(json) {
    return JSON.stringify(json);
}
exports.JSONToString = JSONToString;
function moneyStringToNumber(money) {
    return Number(money.replace(/[^0-9\.]+/g, ''));
}
exports.moneyStringToNumber = moneyStringToNumber;
function daysPastEpochToDate(days) {
    return new Date(days * 8.64e7);
}
exports.daysPastEpochToDate = daysPastEpochToDate;
function msToDate(ms) {
    return new Date(ms);
}
exports.msToDate = msToDate;
function isoStringToDate(string) {
    return new Date(string);
}
exports.isoStringToDate = isoStringToDate;
function base64ToString(string) {
    return atob(string);
}
exports.base64ToString = base64ToString;
function base64ToBinary(string) {
    const base64String = atob(string);
    let binaryString = '';
    for (let i = 0; i < base64String.length; i++) {
        binaryString += base64String[i].charCodeAt(0).toString(2);
    }
    return binaryString;
}
exports.base64ToBinary = base64ToBinary;
function debeziumStringToInterval(string) {
    const match = string.match(/^P(\d+Y)?(\d+M)?(\d+D)?T?(\d+H)?(\d+M)?(\d+S)?$/);
    if (!match)
        throw new Error(`Interval string is not properly formatted: ${string}`);
    const years = parseInt(match[1]) || 0;
    const months = parseInt(match[2]) || 0;
    const days = parseInt(match[3]) || 0;
    const hours = parseInt(match[4]) || 0;
    const minutes = parseInt(match[5]) || 0;
    const seconds = parseInt(match[6]) || 0;
    return { years, months, days, hours, minutes, seconds };
}
exports.debeziumStringToInterval = debeziumStringToInterval;
function msPastMidnightToTimeString(ms) {
    return dateToTimeString(new Date(ms));
}
exports.msPastMidnightToTimeString = msPastMidnightToTimeString;
function dateToTimeString(date) {
    const hours = (date.getUTCHours() + '').padStart(2, '0');
    const minutes = (date.getUTCMinutes() + '').padStart(2, '0');
    const seconds = (date.getUTCSeconds() + '').padStart(2, '0');
    return `${hours}:${minutes}:${seconds}`;
}
exports.dateToTimeString = dateToTimeString;
//# sourceMappingURL=transforms.js.map