import { ActionType } from './bundle-data.types';
import { Auth, RunContext } from './context.types';
import { DocumentData, SquidDocId, SquidDocument } from './document.types';
import { Logger } from './logger.types';
import { MutationContext } from './mutation.context';
import { Mutation, MutationType } from './mutation.types';
import { QueryContext } from './query';
import { SecretKey } from './secret.types';
import { ApiCallContext } from './api-call.context';
import { NamedQueryContext } from './named-query.context';
import { GraphqlContext } from './graphql.context';
export type DocHash = string;
export type SecurityResponse = {
    docsToHash: Record<SquidDocId, DocHash | undefined>;
    rulesPassed: true;
} | {
    rulesPassed: false;
};
export interface ServiceConfig {
    context: RunContext;
    logger: Logger;
    secrets: Record<SecretKey, any>;
    backendApiKey: string;
    codeDir: string;
    auth: Auth | undefined;
}
export type SecureDatabaseAction<T extends ActionType> = T extends 'all' ? () => boolean | Promise<boolean> : T extends 'read' ? (context?: QueryContext) => boolean | Promise<boolean> : (context?: MutationContext) => boolean | Promise<boolean>;
export type SecureApiAction = (context?: ApiCallContext) => boolean | Promise<boolean>;
export type SecureNamedQueryAction = (context?: NamedQueryContext) => boolean | Promise<boolean>;
export type SecureGraphQLAction = (context?: GraphqlContext) => boolean | Promise<boolean>;
export type TransformDatabaseAction<T extends ActionType> = T extends 'read' ? (request?: TransformDatabaseReadRequest) => TransformDatabaseReadResponse | Promise<TransformDatabaseReadResponse> : (request?: TransformDatabaseWriteRequest) => TransformDatabaseWriteResponse | Promise<TransformDatabaseWriteResponse>;
export interface TransformDatabaseReadRequest {
    documents: Array<SquidDocument>;
}
export interface TransformDatabaseWriteRequest {
    mutations: Array<Mutation>;
}
export type TransformDatabaseReadResponse = Array<SquidDocument>;
export type TransformDatabaseWriteResponse = Array<Mutation>;
export type ExecutableAction = (...args: any[]) => any;
export type TriggerAction = (request?: TriggerRequest) => void | Promise<void>;
export interface TriggerRequest<T extends DocumentData = any> {
    squidDocId: SquidDocId;
    mutationType: MutationType;
    docBefore?: T;
    docAfter?: T;
}
export type SchedulerAction = () => void | Promise<void>;
export type WebhookAction = (request?: WebhookRequest) => any;
export interface WebhookRequest {
    body: any;
    queryParams: Record<string, string>;
    headers: Record<string, string>;
    files: Array<SquidFile>;
}
export interface SquidFile {
    data: Uint8Array;
    fieldName: string;
    mimetype: string;
    originalName: string;
    size: number;
    encoding?: string;
}
export type ActionMethodDecorator<U> = <T extends U>(target: Object, propertyName: string, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>;
