"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformResponse = exports.transformParams = exports.executeFunctionSecureAnnotationType = void 0;
const query_1 = require("./query");
const mutation_context_1 = require("./mutation.context");
const named_query_context_1 = require("./named-query.context");
const graphql_context_1 = require("./graphql.context");
const api_call_context_1 = require("./api-call.context");
exports.executeFunctionSecureAnnotationType = [
    'secureQuery',
    'secureMutation',
    'secureNamedQuery',
    'secureGraphQL',
    'secureApi',
];
function transformParams(args, executeFunctionAnnotationType) {
    switch (executeFunctionAnnotationType) {
        case 'webhook':
        case 'executable':
        case 'scheduler':
        case 'trigger':
        case 'transformRead':
        case 'transformWrite':
        case 'metadata':
            return args;
        case 'secureQuery':
            return [new query_1.QueryContext(args[0].query)];
        case 'secureMutation':
            return [new mutation_context_1.MutationContext(args[0].mutation, args[0].beforeAndAfterDocs, args[0].serverTimestamp)];
        case 'secureNamedQuery':
            return [new named_query_context_1.NamedQueryContext(args[0])];
        case 'secureGraphQL':
            return [new graphql_context_1.GraphqlContext(args[0])];
        case 'secureApi':
            return [new api_call_context_1.ApiCallContext(args[0])];
    }
}
exports.transformParams = transformParams;
function transformResponse(functionResponse, executeFunctionAnnotationType) {
    if (!exports.executeFunctionSecureAnnotationType.includes(executeFunctionAnnotationType)) {
        return functionResponse;
    }
    return {
        rulesPassed: functionResponse,
        docsToHash: functionResponse ? {} : undefined,
    };
}
exports.transformResponse = transformResponse;
//# sourceMappingURL=backend-run.types.js.map