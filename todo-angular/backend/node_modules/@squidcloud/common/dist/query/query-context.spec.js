"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const query_context_1 = require("./query-context");
const simple_query_builder_1 = require("./simple-query-builder");
describe('query context', () => {
    describe('subsets', () => {
        it('determines subsets for the "==" condition', () => {
            const query = builder().where('age', '==', 5).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('age', '==', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '==', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '!=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 6)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 6)).toBe(true);
            expect(qc.isSubsetOf('age', '<=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '<=', 6)).toBe(true);
        });
        it('determines subsets for the "!=" condition', () => {
            const query = builder().where('age', '!=', 5).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('age', '==', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '!=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 6)).toBe(false);
        });
        it('determines subsets for the ">" condition', () => {
            const query = builder().where('age', '>', 5).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('age', '==', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '!=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '!=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 6)).toBe(false);
        });
        it('determines subsets for the ">=" condition', () => {
            const query = builder().where('age', '>=', 5).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('age', '==', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '!=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 6)).toBe(false);
        });
        it('determines subsets for the "<" condition', () => {
            const query = builder().where('age', '<', 5).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('age', '==', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '!=', 6)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '<', 6)).toBe(true);
            expect(qc.isSubsetOf('age', '<=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '<=', 6)).toBe(true);
        });
        it('determines subsets for the "<=" condition', () => {
            const query = builder().where('age', '<=', 5).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('age', '==', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '==', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 6)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 6)).toBe(true);
            expect(qc.isSubsetOf('age', '<=', 4)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '<=', 6)).toBe(true);
        });
        it('determines subsets for a multi-condition a query', () => {
            const query = builder().where('age', '>=', 5).where('age', '<', 10).where('age', '!=', 7).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('age', '==', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '!=', 7)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>', 5)).toBe(false);
            expect(qc.isSubsetOf('age', '>', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '>=', 4)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 5)).toBe(true);
            expect(qc.isSubsetOf('age', '>=', 6)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 9)).toBe(false);
            expect(qc.isSubsetOf('age', '<', 10)).toBe(true);
            expect(qc.isSubsetOf('age', '<', 11)).toBe(true);
            expect(qc.isSubsetOf('age', '<=', 8)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 9)).toBe(false);
            expect(qc.isSubsetOf('age', '<=', 10)).toBe(true);
            expect(qc.isSubsetOf('name', '==', 'Colin')).toBe(false);
        });
        it('determines if a query is a subset of an array of conditions', () => {
            const query = builder()
                .where('age', '>', 5)
                .where('age', '<=', 10)
                .where('age', '!=', 7)
                .where('name', '==', 'Colin')
                .where('height', '>', 5.9)
                .build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOfConditions([
                { fieldName: 'age', operator: '>', value: 4 },
                { fieldName: 'name', operator: '==', value: 'Colin' },
            ])).toBe(true);
            expect(qc.isSubsetOfConditions([
                { fieldName: 'age', operator: '>', value: 4 },
                { fieldName: 'name', operator: '==', value: 'Yossi' },
            ])).toBe(false);
            expect(qc.isSubsetOfConditions([
                { fieldName: 'age', operator: '>', value: 4 },
                { fieldName: 'age', operator: '!=', value: 7 },
            ])).toBe(true);
            expect(qc.isSubsetOfConditions([
                { fieldName: 'age', operator: '>', value: 4 },
                { fieldName: 'age', operator: '!=', value: 8 },
            ])).toBe(false);
            expect(qc.isSubsetOfConditions([
                { fieldName: 'age', operator: '>', value: 4 },
                { fieldName: 'height', operator: '<', value: 6.4 },
            ])).toBe(false);
            expect(qc.isSubsetOfConditions([
                { fieldName: 'age', operator: '>', value: 4 },
                { fieldName: 'height', operator: '>=', value: 5.91 },
            ])).toBe(false);
        });
        it('determines if a query is a subset of another query', () => {
            const query = builder()
                .where('age', '>=', 5)
                .where('age', '<', 10)
                .where('age', '!=', 7)
                .where('name', '==', 'Colin')
                .limit(100)
                .build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOfQuery(builder().where('age', '>=', 5).where('name', '==', 'Colin').build())).toBe(true);
            expect(qc.isSubsetOfQuery(builder().where('age', '>=', 5).where('name', '==', 'Yossi').build())).toBe(false);
            expect(qc.isSubsetOfQuery(builder().where('age', '>=', 5).where('name', '==', 'Colin').limit(50).build())).toBe(false);
            expect(qc.isSubsetOfQuery(builder().where('age', '>=', 5).where('name', '==', 'Colin').limit(200).build())).toBe(true);
        });
        it('determines if a query is a subset of another ordered query', () => {
            const query = builder().sortBy('name').sortBy('age', false).sortBy('height').limit(100).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOfQuery(builder().sortBy('name').build())).toBe(true);
            expect(qc.isSubsetOfQuery(builder().sortBy('name').sortBy('age', false).build())).toBe(true);
            expect(qc.isSubsetOfQuery(builder().sortBy('name').sortBy('age', false).sortBy('height').build())).toBe(true);
            expect(qc.isSubsetOfQuery(builder().sortBy('name').sortBy('age', false).sortBy('height').sortBy('weight').build())).toBe(false);
            expect(qc.isSubsetOfQuery(builder().sortBy('name').sortBy('age', false).limit(50).build())).toBe(false);
            expect(qc.isSubsetOfQuery(builder().sortBy('name').sortBy('age', false).limit(200).build())).toBe(true);
            expect(qc.isSubsetOfQuery(builder().sortBy('name').sortBy('age').limit(200).build())).toBe(false);
        });
        it('determines subsets for the "in" condition', () => {
            const query = builder().where('name', '!=', 'Brain').where('name', 'in', ['Colin', 'Yossi']).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('name', '==', 'Colin')).toBe(false);
            expect(qc.isSubsetOf('name', '==', 'Yossi')).toBe(false);
            expect(qc.isSubsetOf('name', '!=', 'Brain')).toBe(true);
            expect(qc.isSubsetOf('name', 'in', ['Colin', 'Yossi'])).toBe(true);
            expect(qc.isSubsetOfConditions([
                { fieldName: 'name', operator: '==', value: 'Yossi' },
                { fieldName: 'name', operator: '==', value: 'Colin' },
            ])).toBe(true);
            expect(qc.isSubsetOfQuery(builder().where('name', '==', 'Colin').build())).toBe(false);
            expect(qc.isSubsetOfQuery(builder().where('name', '==', 'Colin').where('name', '==', 'Yossi').build())).toBe(true);
        });
        it('determines subsets for the "not in" condition', () => {
            const query = builder().where('name', 'not in', ['Colin', 'Yossi']).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.isSubsetOf('name', 'not in', ['Colin', 'Yossi'])).toBe(true);
            expect(qc.isSubsetOf('name', 'not in', ['Colin', 'Brian'])).toBe(false);
            expect(qc.isSubsetOfQuery(builder().where('name', '!=', 'Colin').build())).toBe(true);
            expect(qc.isSubsetOfQuery(builder().where('name', '!=', 'Colin').where('name', '!=', 'Brian').build())).toBe(false);
        });
    });
    describe('includes and matches', () => {
        it('determines if a query includes a single condition', () => {
            const query = builder().where('age', '<', 10).where('age', '>', 5).where('age', '!=', 7).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.includes('age', '<', 10)).toBe(true);
            expect(qc.includes('age', '<', 11)).toBe(false);
            expect(qc.includes('age', '>', 5)).toBe(true);
            expect(qc.includes('age', '>', 4)).toBe(false);
            expect(qc.includes('age', '!=', 7)).toBe(true);
            expect(qc.includes('age', '!=', 6)).toBe(false);
        });
        it('determines if a query includes and matches multiple conditions', () => {
            const query = builder().where('age', '<', 10).where('age', '>', 5).where('age', '!=', 7).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.includesConditions([
                { fieldName: 'age', operator: '<', value: 10 },
                { fieldName: 'age', operator: '>', value: 5 },
            ])).toBe(true);
            expect(qc.matchesConditions([
                { fieldName: 'age', operator: '<', value: 10 },
                { fieldName: 'age', operator: '>', value: 5 },
            ])).toBe(false);
            expect(qc.matchesConditions([
                { fieldName: 'age', operator: '<', value: 10 },
                { fieldName: 'age', operator: '>', value: 5 },
                { fieldName: 'age', operator: '!=', value: 7 },
            ])).toBe(true);
            expect(qc.matchesConditions([
                { fieldName: 'age', operator: '<', value: 10 },
                { fieldName: 'age', operator: '>', value: 5 },
                { fieldName: 'age', operator: '!=', value: 6 },
            ])).toBe(false);
        });
        it('determines if a query matches another query', () => {
            const query = builder()
                .where('age', '>=', 5)
                .where('age', '<', 10)
                .sortBy('name')
                .sortBy('age', false)
                .limit(100)
                .build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.matchesQuery(builder().where('age', '>=', 5).where('age', '<', 10).sortBy('name').sortBy('age', false).limit(100).build())).toBe(true);
            expect(qc.matchesQuery(builder().where('age', '>=', 5).where('age', '<', 10).sortBy('name').sortBy('age', false).build())).toBe(false);
            expect(qc.matchesQuery(builder().where('age', '>=', 4).where('age', '<', 11).sortBy('name').sortBy('age', false).limit(100).build())).toBe(false);
            expect(qc.matchesQuery(builder().where('age', '>=', 5).where('age', '<', 10).sortBy('name').limit(100).build())).toBe(false);
        });
        it('determines includes and matches for the "in" condition', () => {
            const query = builder().where('name', '!=', 'Brain').where('name', 'in', ['Colin', 'Yossi']).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.includes('name', '==', 'Colin')).toBe(false);
            expect(qc.includes('name', '==', 'Yossi')).toBe(false);
            expect(qc.includes('name', '!=', 'Brain')).toBe(true);
            expect(qc.includes('name', 'in', ['Colin', 'Yossi'])).toBe(true);
            expect(qc.includesConditions([
                { fieldName: 'name', operator: '==', value: 'Yossi' },
                { fieldName: 'name', operator: '==', value: 'Colin' },
            ])).toBe(true);
            expect(qc.matchesConditions([
                { fieldName: 'name', operator: '==', value: 'Yossi' },
                { fieldName: 'name', operator: '==', value: 'Colin' },
            ])).toBe(false);
            expect(qc.matchesQuery(builder().where('name', '==', 'Colin').build())).toBe(false);
            expect(qc.matchesQuery(builder().where('name', '==', 'Colin').where('name', '==', 'Yossi').where('name', '!=', 'Brain').build())).toBe(true);
        });
        it('determines matches for the "not in" condition', () => {
            const query = builder().where('name', 'not in', ['Colin', 'Yossi']).build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.includes('name', 'not in', ['Yossi', 'Colin'])).toBe(true);
            expect(qc.includes('name', 'not in', ['Colin', 'Brian'])).toBe(false);
            expect(qc.matchesConditions([
                { fieldName: 'name', operator: '!=', value: 'Yossi' },
                { fieldName: 'name', operator: '!=', value: 'Colin' },
            ])).toBe(true);
            expect(qc.matchesQuery(builder().where('name', '!=', 'Colin').build())).toBe(false);
            expect(qc.matchesQuery(builder().where('name', '!=', 'Colin').where('name', '!=', 'Yossi').build())).toBe(true);
        });
    });
    describe('ordering', () => {
        it('determines if a query is ordered', () => {
            const query = builder().sortBy('name').sortBy('age', false).sortBy('height').build();
            const qc = new query_context_1.QueryContext(query);
            expect(qc.sortedBy([{ fieldName: 'name', asc: true }])).toBe(true);
            expect(qc.sortedBy([{ fieldName: 'name' }])).toBe(true);
            expect(qc.sortedBy([{ fieldName: 'name' }, { fieldName: 'age' }])).toBe(false);
            expect(qc.sortedBy([{ fieldName: 'name' }, { fieldName: 'age', asc: false }])).toBe(true);
            expect(qc.sortedBy([{ fieldName: 'age', asc: false }])).toBe(false);
            expect(qc.sortedBy([{ fieldName: 'height', asc: true }])).toBe(false);
            expect(qc.sortedBy([
                { fieldName: 'name', asc: true },
                { fieldName: 'age', asc: false },
            ])).toBe(true);
            expect(qc.sortedBy([
                { fieldName: 'name', asc: true },
                { fieldName: 'age', asc: false },
                { fieldName: 'height', asc: true },
            ])).toBe(true);
            expect(qc.sortedBy([
                { fieldName: 'name', asc: true },
                { fieldName: 'age', asc: false },
                { fieldName: 'height', asc: true },
                { fieldName: 'weight', asc: false },
            ])).toBe(false);
        });
    });
    function builder() {
        return new simple_query_builder_1.SimpleQueryBuilder('collectionName', 'integrationId');
    }
});
//# sourceMappingURL=query-context.spec.js.map