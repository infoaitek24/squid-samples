import { IntegrationId } from '../communication.types';
import { CollectionName, DocumentData, FieldName, PrimitiveFieldType } from '../document.types';
import { Operator, Query } from '../query.types';
export declare class SimpleQueryBuilder<MyDocType extends DocumentData> {
    protected readonly collectionName: CollectionName;
    protected readonly integrationId: IntegrationId;
    protected readonly query: Query<MyDocType>;
    constructor(collectionName: CollectionName, integrationId: IntegrationId);
    where(fieldName: (keyof MyDocType & FieldName) | string, operator: Operator | 'in' | 'not in', value: PrimitiveFieldType | Array<PrimitiveFieldType>): this;
    limit(limit: number): this;
    sortBy(fieldName: keyof MyDocType & FieldName, asc?: boolean): this;
    build(): Query;
    private mergeConditions;
}
