import { QueryName, SchedulerConfig, SchedulerId, TriggerConfig, TriggerId, WebhookConfig, WebhookId } from './application.types';
import { IntegrationId } from './communication.types';
import { CollectionName } from './document.types';
import { ApiEndpointId } from './integration.types';
export type ActionType = 'read' | 'write' | 'update' | 'insert' | 'delete' | 'all';
export type ServiceName = string;
export type FunctionName = string;
export type ServiceFunctionName = `${ServiceName}:${FunctionName}`;
export interface ApplicationBundleData {
    databases: Record<IntegrationId, DatabaseMetadata>;
    apis: Record<IntegrationId, {
        endpoints: Record<ApiEndpointId, ApiMetadata>;
    } & ApiMetadata>;
    graphql: Record<IntegrationId, GraphQLMetadata>;
    executables: Record<FunctionName, ExecutableMetadata>;
    triggers: Record<TriggerId, TriggerConfig>;
    schedulers: Record<SchedulerId, SchedulerConfig>;
    webhooks: Record<WebhookId, WebhookConfig>;
    namedQueries: Record<IntegrationId, Record<QueryName, NamedQueryMetadata>>;
}
export interface DatabaseMetadata {
    collections: Record<CollectionName, CollectionMetadata>;
    security?: Record<ActionType, Array<ServiceFunctionName>>;
    transform?: Record<ActionType, DatabaseTransformMetadata>;
}
export interface CollectionMetadata {
    security?: Record<ActionType, Array<ServiceFunctionName>>;
    transform?: Record<ActionType, DatabaseTransformMetadata>;
}
export interface DatabaseTransformMetadata {
    serviceFunction: ServiceFunctionName;
}
export interface ExecutableMetadata {
    serviceFunction: ServiceFunctionName;
}
export interface NamedQueryMetadata {
    security?: Array<ServiceFunctionName>;
    queryString: string;
}
export interface ApiMetadata {
    security: Array<ServiceFunctionName>;
}
interface GraphQLMetadata {
    security: Array<ServiceFunctionName>;
}
export {};
