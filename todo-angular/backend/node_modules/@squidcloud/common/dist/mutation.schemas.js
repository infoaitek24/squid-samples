"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutationRequestSchema = void 0;
// I think (not sure, though) that there is a small bug in the ajv type definitions that make it impossible to define a
// schema for `any`. The following works around it.
const Anything = {};
const AnyString = {
    type: 'string',
};
const DocumentSchema = {
    type: 'object',
};
const DocIdSchema = {
    type: 'object',
    required: ['docId', 'integrationId', 'collectionName'],
    properties: {
        docId: AnyString,
        integrationId: AnyString,
        collectionName: AnyString,
    },
};
const InsertSchema = {
    type: 'object',
    required: ['type', 'properties', 'squidDocIdObj'],
    properties: {
        type: { type: 'string', const: 'insert' },
        properties: DocumentSchema,
        squidDocIdObj: DocIdSchema,
    },
};
const DeleteSchema = {
    type: 'object',
    required: ['type', 'squidDocIdObj'],
    properties: {
        type: { type: 'string', const: 'delete' },
        squidDocIdObj: DocIdSchema,
    },
};
// For some reason, inlining this causes type-checking errors. I think the poor typescript compiler gets confused.
const ValueUpdateProperties = {
    type: { type: 'string', const: 'update' },
    value: Anything,
};
const PropertyMutationSchema = {
    oneOf: [
        {
            type: 'object',
            required: ['type', 'fn', 'value'],
            properties: {
                type: { type: 'string', const: 'applyNumericFn' },
                fn: { type: 'string', const: 'increment' },
                value: { type: 'number' },
            },
        },
        {
            type: 'object',
            required: ['type'],
            properties: {
                type: { type: 'string', const: 'removeProperty' },
            },
        },
        {
            type: 'object',
            required: ['type', 'value'],
            properties: ValueUpdateProperties,
        },
        {
            type: 'object',
            required: ['type', 'fn', 'value'],
            properties: {
                type: { type: 'string', const: 'applyStringFn' },
                fn: { type: 'string', const: 'extendString' },
                value: AnyString,
            },
        },
        {
            type: 'object',
            required: ['type', 'fn'],
            properties: {
                type: { type: 'string', const: 'applyStringFn' },
                fn: { type: 'string', const: 'trim' },
            },
        },
    ],
};
const UpdateSchema = {
    type: 'object',
    required: [],
    properties: {
        type: { type: 'string', const: 'update' },
        squidDocIdObj: DocIdSchema,
        properties: {
            type: 'object',
            patternProperties: {
                '[0-9a-zA-Z\\$_\\-\\.]+': {
                    type: 'array',
                    minItems: 1,
                    items: PropertyMutationSchema,
                },
            },
        },
    },
};
const MutationSchema = {
    oneOf: [InsertSchema, DeleteSchema, UpdateSchema],
};
exports.MutationRequestSchema = {
    type: 'object',
    required: ['clientId', 'integrationId', 'mutations'],
    properties: {
        clientId: AnyString,
        integrationId: AnyString,
        mutations: {
            type: 'array',
            items: MutationSchema,
        },
    },
};
//# sourceMappingURL=mutation.schemas.js.map