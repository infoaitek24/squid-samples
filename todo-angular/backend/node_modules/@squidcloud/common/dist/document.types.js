"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasDocumentDiff = exports.getSquidDocId = exports.parseSquidDocId = void 0;
const tslib_1 = require("tslib");
const deep_diff_1 = tslib_1.__importDefault(require("deep-diff"));
const nullish_1 = require("./utils/nullish");
const serialization_1 = require("./utils/serialization");
function parseSquidDocId(squidDocId) {
    return (0, serialization_1.deserializeObj)(squidDocId);
}
exports.parseSquidDocId = parseSquidDocId;
function getSquidDocId(...args) {
    const [a, b, c] = args;
    const squidDocIdObjObj = typeof a === 'object' ? a : { docId: a, collectionName: b, integrationId: c };
    // Handle nulls and empty strings
    if (!squidDocIdObjObj.integrationId)
        squidDocIdObjObj.integrationId = undefined;
    return (0, serialization_1.normalizeJsonAsString)(squidDocIdObjObj);
}
exports.getSquidDocId = getSquidDocId;
/**
 * Determines whether a beforeDoc and an afterDoc have the same properties.
 * Our internal properties such as __docId__ and __ts__ are excluded from the
 * comparison, as well as any primary keys changes.
 */
function hasDocumentDiff(beforeDoc, afterDoc) {
    const diffs = (0, deep_diff_1.default)(beforeDoc, afterDoc) || [];
    const ignoredKeys = ['__docId__', '__ts__'];
    const docIdDiff = diffs.find((diff) => {
        var _a;
        return ((_a = diff.path) === null || _a === void 0 ? void 0 : _a[0]) === '__docId__';
    });
    if (docIdDiff) {
        if (docIdDiff.kind !== 'E' || !docIdDiff.rhs) {
            throw new Error(`Unexpected diff for __docId__: ${docIdDiff}`);
        }
        const docIdObj = parseSquidDocId(docIdDiff.rhs + '');
        ignoredKeys.push(...Object.keys(docIdObj));
    }
    const diff = diffs === null || diffs === void 0 ? void 0 : diffs.find((diff, index) => {
        var _a;
        // Ignore changes to the docId, ts and primaryKeys.
        if (ignoredKeys.includes((_a = diff.path) === null || _a === void 0 ? void 0 : _a[0]))
            return false;
        switch (diff.kind) {
            case 'N':
                // If a new property has been added, and it's defined, the document is changed.
                return (0, nullish_1.isNotNullish)(diff.rhs);
            case 'E':
            case 'D':
            case 'A':
                return true;
        }
        return false;
    });
    return !!diff;
}
exports.hasDocumentDiff = hasDocumentDiff;
//# sourceMappingURL=document.types.js.map