"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryUnsubscribeRequestSchema = exports.QueryRequestSchema = exports.QuerySchema = void 0;
exports.QuerySchema = {
    $id: 'querySchema',
    type: 'object',
    required: ['collectionName', 'integrationId'],
    properties: {
        collectionName: { type: 'string', nullable: false },
        integrationId: { type: 'string', nullable: false },
        conditions: {
            type: 'array',
            nullable: false,
            items: {
                type: 'object',
                nullable: false,
                required: ['fieldName', 'operator', 'value'],
                properties: {
                    fieldName: { type: 'string', nullable: false },
                    operator: {
                        type: 'string',
                        nullable: false,
                        enum: ['==', '>=', '<=', '>', '<', '!='],
                    },
                    value: {
                        $ref: 'querySchema#/definitions/conditionValueSchema',
                    },
                },
            },
        },
        sortOrder: {
            type: 'array',
            nullable: false,
            items: {
                type: 'object',
                required: ['fieldName', 'asc'],
                properties: {
                    fieldName: { type: 'string' },
                    asc: { type: 'boolean' },
                },
            },
        },
        limit: { type: 'number', nullable: false },
    },
    definitions: {
        conditionValueSchema: {
            oneOf: [
                { type: 'null', nullable: true },
                { type: 'string', nullable: false },
                { type: 'number', nullable: false },
                { type: 'boolean', nullable: false },
                {
                    type: 'array',
                    nullable: false,
                    items: {
                        $ref: 'querySchema#/definitions/conditionValueSchema',
                    },
                },
                {
                    type: 'object',
                    nullable: false,
                    patternProperties: {
                        '[0-9a-zA-Z\\$_\\-\\.]{1,64}': {
                            $ref: 'querySchema#/definitions/conditionValueSchema',
                        },
                    },
                },
            ],
        },
        // TODO understand why that doesn't typecheck. See https://github.com/ajv-validator/ajv/issues/2081
    },
};
exports.QueryRequestSchema = {
    type: 'object',
    required: ['clientId', 'clientRequestId', 'query', 'subscribe'],
    properties: {
        clientId: { type: 'string', nullable: false },
        clientRequestId: { type: 'string', nullable: false },
        query: exports.QuerySchema,
        subscribe: { type: 'boolean', nullable: false },
    },
};
exports.QueryUnsubscribeRequestSchema = {
    type: 'object',
    required: ['clientId', 'clientRequestId'],
    properties: {
        clientId: { type: 'string', nullable: false },
        clientRequestId: { type: 'string', nullable: false },
    },
};
//# sourceMappingURL=query.schemas.js.map