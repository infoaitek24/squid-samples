"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMetricDataRequestSchema = void 0;
const metricTypeSchema = {
    type: 'object',
    nullable: true,
    required: [],
    properties: {
        summary: {
            type: 'boolean',
            nullable: true,
        },
        histogram: {
            type: 'object',
            nullable: true,
            required: ['rate', 'resolution'],
            properties: {
                rate: {
                    type: 'string',
                    nullable: false,
                },
                resolution: {
                    type: 'string',
                    nullable: false,
                },
            },
        },
    },
};
exports.GetMetricDataRequestSchema = {
    type: 'object',
    required: ['requests'],
    properties: {
        requests: {
            type: 'array',
            items: {
                type: 'object',
                required: ['metricGroup', 'filters'],
                properties: {
                    filters: {
                        type: 'object',
                        nullable: false,
                        required: [],
                        properties: {
                            functionName: { type: 'string', nullable: true },
                            integrationId: { type: 'string', nullable: true },
                            resultType: { type: 'string', nullable: true, enum: ['success', 'failure'] },
                        },
                    },
                    metricGroup: {
                        type: 'string',
                        enum: [
                            'backendBootstrap',
                            'backendFunctionCall',
                            'integrationConnectAttempt',
                            'integrationReadOperation',
                            'integrationWriteOperation',
                        ],
                    },
                    metrics: {
                        type: 'object',
                        required: [],
                        properties: {
                            latency: metricTypeSchema,
                            successful: metricTypeSchema,
                            failure: metricTypeSchema,
                            total: metricTypeSchema,
                        },
                    },
                },
            },
        },
        timeWindow: {
            type: 'object',
            nullable: false,
            required: ['startTimeMs', 'endTimeMs'],
            properties: {
                startTimeMs: {
                    type: 'number',
                    nullable: false,
                },
                endTimeMs: {
                    type: 'number',
                    nullable: false,
                },
            },
        },
    },
};
//# sourceMappingURL=metrics.schemas.js.map