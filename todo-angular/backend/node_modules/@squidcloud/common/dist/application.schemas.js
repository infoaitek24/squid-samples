"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoverOpenApiEndpointsRequestSchema = exports.UpdateAllowedHostsRequestSchema = exports.DiscoverGraphQLConnectionSchemaRequestSchema = exports.DiscoverDataConnectionSchemaRequestSchema = exports.TestDataConnectionRequestSchema = exports.DeleteIntegrationRequestSchema = exports.UpsertIntegrationRequestSchema = exports.UpdateOpenIdProviderRequestSchema = void 0;
const integration_types_1 = require("./integration.types");
exports.UpdateOpenIdProviderRequestSchema = {
    type: 'object',
    required: ['openIdProvider'],
    properties: {
        openIdProvider: {
            type: 'object',
            required: ['providerType', 'clientId', 'domain'],
            properties: {
                providerType: { type: 'string', const: 'auth0' },
                clientId: { type: 'string', nullable: false },
                domain: { type: 'string', nullable: false },
            },
        },
    },
};
const MysqlConnectionOptionsSchema = {
    type: 'object',
    nullable: false,
    required: ['secrets', 'host', 'user', 'database'],
    properties: {
        host: { type: 'string', nullable: false },
        user: { type: 'string', nullable: false },
        database: { type: 'string', nullable: false },
        secrets: {
            type: 'object',
            required: ['password'],
            nullable: false,
            properties: {
                password: { type: 'string', nullable: false, isSecret: {} },
            },
        },
        connectionLimit: { type: 'number', nullable: false },
    },
};
const MssqlConnectionOptionsSchema = {
    type: 'object',
    nullable: false,
    required: ['secrets', 'host', 'user', 'database'],
    properties: {
        host: { type: 'string', nullable: false },
        user: { type: 'string', nullable: false },
        database: { type: 'string', nullable: false },
        secrets: {
            type: 'object',
            required: ['password'],
            nullable: false,
            properties: {
                password: { type: 'string', nullable: false, isSecret: {} },
            },
        },
        connectionLimit: { type: 'number', nullable: false },
        sslEnabled: { type: 'boolean', nullable: false },
    },
};
const PostgresConnectionOptionsSchema = {
    type: 'object',
    nullable: false,
    required: ['secrets', 'host', 'user', 'database'],
    properties: {
        host: { type: 'string', nullable: false },
        user: { type: 'string', nullable: false },
        database: { type: 'string', nullable: false },
        schema: { type: 'string', nullable: true },
        sslEnabled: { type: 'boolean', nullable: true },
        secrets: {
            type: 'object',
            required: ['password'],
            nullable: false,
            properties: {
                password: { type: 'string', nullable: false, isSecret: {} },
                sslCertificate: { type: 'string', nullable: true, isSecret: {} },
            },
        },
        connectionLimit: { type: 'number', nullable: false },
    },
};
const MongoConnectionOptionsSchema = {
    type: 'object',
    nullable: false,
    required: ['connectionString'],
    properties: {
        connectionString: { type: 'string', nullable: false },
        user: { type: 'string', nullable: true },
        secrets: {
            type: 'object',
            nullable: false,
            properties: {
                password: { type: 'string', nullable: false, isSecret: {} },
            },
        },
        maxPoolSize: { type: 'number', nullable: false },
        minPoolSize: { type: 'number', nullable: false },
        socketTimeoutMS: { type: 'number', nullable: false },
        keepAlive: { type: 'boolean', nullable: false },
        directConnection: { type: 'boolean', nullable: false },
        ssl: {
            type: 'object',
            nullable: false,
            required: ['certificateFile', 'validate'],
            properties: {
                certificateFile: { type: 'string', nullable: false },
                validate: { type: 'boolean', nullable: false },
            },
        },
    },
};
const GraphQLConnectionOptionsSchema = {
    type: 'object',
    nullable: false,
    required: ['baseUrl'],
    properties: {
        baseUrl: { type: 'string', nullable: false, format: 'uri' },
    },
};
/** Generated using openai */
const ApiEndpointsSchema = {
    type: 'object',
    patternProperties: {
        '^\\S+$': {
            type: 'object',
            required: ['relativePath', 'method'],
            properties: {
                relativePath: {
                    type: 'string',
                },
                method: {
                    type: 'string',
                    enum: ['post', 'get', 'delete', 'patch', 'put'],
                },
                requestSchema: {
                    type: 'object',
                    patternProperties: {
                        '^\\S+$': {
                            type: 'object',
                            properties: {
                                paramLocation: {
                                    type: 'string',
                                    enum: ['query', 'body', 'header'],
                                },
                                fieldNameInRequest: {
                                    type: 'string',
                                },
                            },
                        },
                    },
                },
                responseSchema: {
                    type: 'object',
                    patternProperties: {
                        '^\\S+$': {
                            type: 'object',
                            required: ['paramLocation'],
                            properties: {
                                paramLocation: {
                                    type: 'string',
                                    enum: ['body', 'header'],
                                },
                                fieldPathInResponse: {
                                    type: 'string',
                                },
                            },
                        },
                    },
                },
            },
        },
    },
};
exports.UpsertIntegrationRequestSchema = {
    type: 'object',
    required: ['type', 'id'],
    properties: {
        id: { type: 'string', nullable: false },
        secured: { type: 'boolean', nullable: true },
        schema: { type: 'object', nullable: true },
    },
    oneOf: [
        {
            type: 'object',
            required: [],
            properties: {
                type: { const: integration_types_1.IntegrationType.built_in_db },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.mysql },
                supportsExternalChanges: { type: 'boolean', nullable: true },
                configuration: {
                    type: 'object',
                    nullable: false,
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: MysqlConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.mssql },
                supportsExternalChanges: { type: 'boolean', nullable: true },
                configuration: {
                    type: 'object',
                    nullable: false,
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: MssqlConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.postgres },
                supportsExternalChanges: { type: 'boolean', nullable: true },
                configuration: {
                    type: 'object',
                    nullable: false,
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: PostgresConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.cockroach },
                supportsExternalChanges: { type: 'boolean', nullable: true },
                configuration: {
                    type: 'object',
                    nullable: false,
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: PostgresConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.mongo },
                supportsExternalChanges: { type: 'boolean', nullable: true },
                configuration: {
                    type: 'object',
                    nullable: false,
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: MongoConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['baseUrl', 'endpoints'],
            properties: {
                type: { const: integration_types_1.IntegrationType.api },
                baseUrl: { type: 'string', nullable: false, format: 'uri' },
                endpoints: ApiEndpointsSchema,
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.graphql },
                configuration: {
                    type: 'object',
                    nullable: false,
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: GraphQLConnectionOptionsSchema,
                    },
                },
            },
        },
    ],
};
exports.DeleteIntegrationRequestSchema = {
    type: 'object',
    required: ['integrationId'],
    properties: {
        integrationId: { type: 'string', nullable: false },
    },
};
exports.TestDataConnectionRequestSchema = {
    type: 'object',
    required: ['type', 'configuration'],
    oneOf: [
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.mysql },
                configuration: {
                    type: 'object',
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: MysqlConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.mssql },
                configuration: {
                    type: 'object',
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: MssqlConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.postgres },
                configuration: {
                    type: 'object',
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: PostgresConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.cockroach },
                configuration: {
                    type: 'object',
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: PostgresConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.mongo },
                configuration: {
                    type: 'object',
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: MongoConnectionOptionsSchema,
                    },
                },
            },
        },
        {
            type: 'object',
            required: ['configuration'],
            properties: {
                type: { const: integration_types_1.IntegrationType.graphql },
                configuration: {
                    type: 'object',
                    required: ['connectionOptions'],
                    properties: {
                        connectionOptions: GraphQLConnectionOptionsSchema,
                    },
                },
            },
        },
    ],
};
exports.DiscoverDataConnectionSchemaRequestSchema = {
    type: 'object',
    required: ['integrationType'],
    oneOf: [
        {
            type: 'object',
            required: ['connectionOptions'],
            properties: {
                integrationType: { const: integration_types_1.IntegrationType.mysql },
                connectionOptions: MysqlConnectionOptionsSchema,
            },
        },
        {
            type: 'object',
            required: ['connectionOptions'],
            properties: {
                integrationType: { const: integration_types_1.IntegrationType.mssql },
                connectionOptions: MssqlConnectionOptionsSchema,
            },
        },
        {
            type: 'object',
            required: ['connectionOptions'],
            properties: {
                integrationType: { const: integration_types_1.IntegrationType.postgres },
                connectionOptions: PostgresConnectionOptionsSchema,
            },
        },
        {
            type: 'object',
            required: ['connectionOptions'],
            properties: {
                integrationType: { const: integration_types_1.IntegrationType.cockroach },
                connectionOptions: PostgresConnectionOptionsSchema,
            },
        },
        {
            type: 'object',
            required: ['connectionOptions'],
            properties: {
                integrationType: { const: integration_types_1.IntegrationType.mongo },
                connectionOptions: MongoConnectionOptionsSchema,
            },
        },
        {
            type: 'object',
            properties: {
                integrationType: { const: integration_types_1.IntegrationType.built_in_db },
            },
        },
    ],
};
exports.DiscoverGraphQLConnectionSchemaRequestSchema = {
    type: 'object',
    required: ['integrationType'],
    properties: {
        integrationType: { const: integration_types_1.IntegrationType.graphql },
        connectionOptions: GraphQLConnectionOptionsSchema,
    },
};
exports.UpdateAllowedHostsRequestSchema = {
    type: 'object',
    required: ['allowedHosts'],
    properties: {
        allowedHosts: {
            type: 'array',
            nullable: false,
            minItems: 1,
            items: {
                type: 'string',
                nullable: false,
            },
        },
    },
};
exports.DiscoverOpenApiEndpointsRequestSchema = {
    type: 'object',
    required: ['openApiSpecUrl'],
    properties: {
        openApiSpecUrl: {
            type: 'string',
            format: 'uri',
        },
    },
};
//# sourceMappingURL=application.schemas.js.map