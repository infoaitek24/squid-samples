import { TriggerId } from './application.types';
import { AppId, ClientId, ClientRequestId, IntegrationId } from './communication.types';
import { CollectionName, FieldName, PrimitiveFieldType, SquidDocument } from './document.types';
export type Conditions<Doc = any, F extends FieldName<Doc> = any> = Array<Condition<Doc, F>>;
export interface Condition<Doc = any, F extends FieldName<Doc> = any> {
    fieldName: F;
    operator: Operator;
    value: Doc[F] | null;
}
export type Operator = '==' | '>=' | '<=' | '>' | '<' | '!=';
export type ContextConditions<Doc = any, F extends FieldName<Doc> = any> = Array<ContextCondition<Doc, F>>;
export type GenericValue<Doc = any, F extends FieldName<Doc> = any, O extends AllOperators = any> = O extends 'in' ? Array<Doc[F]> | null : O extends 'not in' ? Array<Doc[F]> | null : Doc[F] | null;
export type ContextCondition<Doc = any, F extends FieldName<Doc> = any> = InContextCondition<Doc, F> | NotInContextCondition<Doc, F> | OtherContextCondition<Doc, F>;
interface InContextCondition<Doc = any, F extends FieldName<Doc> = any> extends Omit<Condition<Doc, F>, 'operator' | 'value'> {
    operator: 'in';
    value: Array<Doc[F]>;
}
interface NotInContextCondition<Doc = any, F extends FieldName<Doc> = any> extends Omit<Condition<Doc, F>, 'operator' | 'value'> {
    operator: 'not in';
    value: Array<Doc[F]>;
}
interface OtherContextCondition<Doc = any, F extends FieldName<Doc> = any> extends Omit<Condition<Doc, F>, 'operator'> {
    operator: Exclude<ContextOperator, 'in' | 'not in'>;
}
export interface GeneralCondition<Doc = any, F extends FieldName<Doc> = any> extends Omit<Condition<Doc, F>, 'operator' | 'value'> {
    operator: AllOperators;
    value: any;
}
export type GeneralConditions<Doc = any, F extends FieldName<Doc> = any> = Array<GeneralCondition<Doc, F>>;
export type ContextOperator = Exclude<Operator, '==' | '!='> | 'in' | 'not in';
export type AllOperators = Operator | 'in' | 'not in';
export interface FieldSort<Doc> {
    fieldName: FieldName<Doc>;
    asc: boolean;
}
interface RegularQueryKey {
    queryType: 'query';
    clientId: string;
    clientRequestId: string;
}
interface TriggerKey {
    queryType: 'trigger';
    triggerId: TriggerId;
}
export type QueryKey = RegularQueryKey | TriggerKey;
export interface Query<Doc = any> {
    collectionName: CollectionName;
    integrationId: string;
    conditions: Conditions<Doc>;
    sortOrder: Array<FieldSort<Doc>>;
    limit: number;
}
export type QuerySubscriptionId = `${ClientId}_${ClientRequestId}`;
export interface QueryRequest {
    clientId: ClientId;
    clientRequestId: ClientRequestId;
    query: Query;
    subscribe: boolean;
}
export interface QueryUnsubscribeRequest {
    clientId: ClientId;
    clientRequestId: ClientRequestId;
}
interface QueryMetadata {
    condCount: number;
}
/**
 * Example query mapping:
 * {
 *   unconditional: ['cid_123'],
 *   conditional: {
 *     age: {
 *       '==': {
 *         10: ['cid2_321'],
 *         11: ['cid2_321'],
 *         12: ['cid2_321'],
 *       },
 *       '>': {
 *         20: ['cid_456']
 *       }
 *     }
 *   },
 *   queriesMetadata: {
 *     'cid_123': {
 *       condCount: 0
 *     },
 *     'cid2_321': {
 *       condCount: 1
 *     },
 *     'cid2_456': {
 *       condCount: 1
 *     }
 *   }
 * }
 */
export type QueryMapping<T extends string> = {
    unconditional: Array<T>;
    conditional: Record<FieldName, Record<Operator, Record<PrimitiveFieldType & string, Array<T>>>>;
    queriesMetadata: Record<T, QueryMetadata>;
};
export declare abstract class QueryMappingManager<T> {
    abstract addQuery(appId: AppId, query: Query, key: T): Promise<void>;
    abstract removeQuery(appId: AppId, key: T): Promise<Query | undefined>;
    abstract findQueriesForDocument(appId: AppId, doc: SquidDocument, collectionName: CollectionName, integrationId: IntegrationId): Promise<Array<T> | undefined>;
}
export declare abstract class SimpleQueryMappingManager<T extends string> extends QueryMappingManager<T> {
    abstract getMapping(appId: AppId, collectionName: CollectionName, integrationId: IntegrationId): Promise<QueryMapping<T> | undefined> | (QueryMapping<T> | undefined);
    findQueriesForDocument(appId: AppId, doc: SquidDocument, collectionName: CollectionName, integrationId: IntegrationId): Promise<Array<T>>;
}
export declare function findQueriesForDocumentSync<T extends string>(mapping: QueryMapping<T>, doc: SquidDocument): Array<T>;
export declare function compareOperator(conditionValue: PrimitiveFieldType, valueInDocument: PrimitiveFieldType, operator: Operator): boolean;
/** Returns a unique identifier for the query which includes both the client id and the client request id. */
export declare function getQuerySubscriptionId(clientId: string, clientRequestId: string): QuerySubscriptionId;
export declare function parseQuerySubscriptionId(querySubscriptionId: QuerySubscriptionId): {
    clientId: string;
    clientRequestId: string;
};
export {};
