import { JSONSchemaType } from 'ajv';
import { UpdateOpenIdProviderRequest } from './application.types';
import { IntegrationType } from './integration.types';
export declare const UpdateOpenIdProviderRequestSchema: JSONSchemaType<UpdateOpenIdProviderRequest>;
export declare const UpsertIntegrationRequestSchema: {
    type: string;
    required: string[];
    properties: {
        id: {
            type: string;
            nullable: boolean;
        };
        secured: {
            type: string;
            nullable: boolean;
        };
        schema: {
            type: string;
            nullable: boolean;
        };
    };
    oneOf: ({
        type: string;
        required: never[];
        properties: {
            type: {
                const: IntegrationType;
            };
            supportsExternalChanges?: undefined;
            configuration?: undefined;
            schema?: undefined;
        };
    } | {
        type: string;
        required: string[];
        properties: {
            type: {
                const: IntegrationType;
            };
            supportsExternalChanges: {
                type: string;
                nullable: boolean;
            };
            configuration: {
                type: string;
                nullable: boolean;
                required: string[];
                properties: {
                    connectionOptions: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            host: {
                                type: string;
                                nullable: boolean;
                            };
                            user: {
                                type: string;
                                nullable: boolean;
                            };
                            database: {
                                type: string;
                                nullable: boolean;
                            };
                            secrets: {
                                type: string;
                                required: string[];
                                nullable: boolean;
                                properties: {
                                    password: {
                                        type: string;
                                        nullable: boolean;
                                        isSecret: {};
                                    };
                                };
                            };
                            connectionLimit: {
                                type: string;
                                nullable: boolean;
                            };
                        };
                    };
                    discoveryOptions?: undefined;
                };
            };
            schema?: undefined;
        };
    } | {
        type: string;
        required: string[];
        properties: {
            type: {
                const: IntegrationType;
            };
            supportsExternalChanges: {
                type: string;
                nullable: boolean;
            };
            configuration: {
                type: string;
                nullable: boolean;
                required: string[];
                properties: {
                    connectionOptions: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            connectionString: {
                                type: string;
                                nullable: boolean;
                            };
                            user: {
                                type: string;
                                nullable: boolean;
                            };
                            secrets: {
                                type: string;
                                nullable: boolean;
                                properties: {
                                    password: {
                                        type: string;
                                        nullable: boolean;
                                        isSecret: {};
                                    };
                                };
                            };
                            maxPoolSize: {
                                type: string;
                                nullable: boolean;
                            };
                            minPoolSize: {
                                type: string;
                                nullable: boolean;
                            };
                            socketTimeoutMS: {
                                type: string;
                                nullable: boolean;
                            };
                            keepAlive: {
                                type: string;
                                nullable: boolean;
                            };
                            directConnection: {
                                type: string;
                                nullable: boolean;
                            };
                            ssl: {
                                type: string;
                                nullable: boolean;
                                required: string[];
                                properties: {
                                    certificateFile: {
                                        type: string;
                                        nullable: boolean;
                                    };
                                    validate: {
                                        type: string;
                                        nullable: boolean;
                                    };
                                };
                            };
                        };
                    };
                    discoveryOptions?: undefined;
                };
            };
            schema?: undefined;
        };
    } | {
        type: string;
        required: never[];
        properties: {
            type: {
                const: IntegrationType;
            };
            schema: {
                type: string;
                required: never[];
                properties: {
                    baseUrl: {
                        type: string;
                        nullable: boolean;
                        format: string;
                    };
                    endpoints: {
                        type: string;
                        patternProperties: {
                            '^\\S+$': {
                                type: string;
                                required: string[];
                                properties: {
                                    relativePath: {
                                        type: string;
                                    };
                                    method: {
                                        type: string;
                                        enum: string[];
                                    };
                                    requestSchema: {
                                        type: string;
                                        patternProperties: {
                                            '^\\S+$': {
                                                type: string;
                                                properties: {
                                                    location: {
                                                        type: string;
                                                        enum: string[];
                                                    };
                                                    fieldNameInRequest: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    responseSchema: {
                                        type: string;
                                        patternProperties: {
                                            '^\\S+$': {
                                                type: string;
                                                required: string[];
                                                properties: {
                                                    location: {
                                                        type: string;
                                                        enum: string[];
                                                    };
                                                    path: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            supportsExternalChanges?: undefined;
            configuration?: undefined;
        };
    } | {
        type: string;
        required: string[];
        properties: {
            type: {
                const: IntegrationType;
            };
            configuration: {
                type: string;
                nullable: boolean;
                required: string[];
                properties: {
                    discoveryOptions: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            openApiSpecUrl: {
                                type: string;
                                nullable: boolean;
                            };
                        };
                    };
                    connectionOptions?: undefined;
                };
            };
            supportsExternalChanges?: undefined;
            schema?: undefined;
        };
    } | {
        type: string;
        required: string[];
        properties: {
            type: {
                const: IntegrationType;
            };
            configuration: {
                type: string;
                nullable: boolean;
                required: string[];
                properties: {
                    connectionOptions: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            baseUrl: {
                                type: string;
                                nullable: boolean;
                                format: string;
                            };
                        };
                    };
                    discoveryOptions?: undefined;
                };
            };
            supportsExternalChanges?: undefined;
            schema?: undefined;
        };
    })[];
};
export declare const DeleteIntegrationRequestSchema: {
    type: string;
    required: string[];
    properties: {
        integrationId: {
            type: string;
            nullable: boolean;
        };
    };
};
export declare const TestDataConnectionRequestSchema: {
    type: string;
    required: string[];
    oneOf: ({
        type: string;
        required: string[];
        properties: {
            type: {
                const: IntegrationType;
            };
            configuration: {
                type: string;
                required: string[];
                properties: {
                    connectionOptions: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            host: {
                                type: string;
                                nullable: boolean;
                            };
                            user: {
                                type: string;
                                nullable: boolean;
                            };
                            database: {
                                type: string;
                                nullable: boolean;
                            };
                            secrets: {
                                type: string;
                                required: string[];
                                nullable: boolean;
                                properties: {
                                    password: {
                                        type: string;
                                        nullable: boolean;
                                        isSecret: {};
                                    };
                                };
                            };
                            connectionLimit: {
                                type: string;
                                nullable: boolean;
                            };
                        };
                    };
                };
            };
        };
    } | {
        type: string;
        required: string[];
        properties: {
            type: {
                const: IntegrationType;
            };
            configuration: {
                type: string;
                required: string[];
                properties: {
                    connectionOptions: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            connectionString: {
                                type: string;
                                nullable: boolean;
                            };
                            user: {
                                type: string;
                                nullable: boolean;
                            };
                            secrets: {
                                type: string;
                                nullable: boolean;
                                properties: {
                                    password: {
                                        type: string;
                                        nullable: boolean;
                                        isSecret: {};
                                    };
                                };
                            };
                            maxPoolSize: {
                                type: string;
                                nullable: boolean;
                            };
                            minPoolSize: {
                                type: string;
                                nullable: boolean;
                            };
                            socketTimeoutMS: {
                                type: string;
                                nullable: boolean;
                            };
                            keepAlive: {
                                type: string;
                                nullable: boolean;
                            };
                            directConnection: {
                                type: string;
                                nullable: boolean;
                            };
                            ssl: {
                                type: string;
                                nullable: boolean;
                                required: string[];
                                properties: {
                                    certificateFile: {
                                        type: string;
                                        nullable: boolean;
                                    };
                                    validate: {
                                        type: string;
                                        nullable: boolean;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    } | {
        type: string;
        required: string[];
        properties: {
            type: {
                const: IntegrationType;
            };
            configuration: {
                type: string;
                required: string[];
                properties: {
                    connectionOptions: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            baseUrl: {
                                type: string;
                                nullable: boolean;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    })[];
};
export declare const DiscoverDataConnectionSchemaRequestSchema: {
    type: string;
    required: string[];
    oneOf: ({
        type: string;
        required: string[];
        properties: {
            integrationType: {
                const: IntegrationType;
            };
            connectionOptions: {
                type: string;
                nullable: boolean;
                required: string[];
                properties: {
                    host: {
                        type: string;
                        nullable: boolean;
                    };
                    user: {
                        type: string;
                        nullable: boolean;
                    };
                    database: {
                        type: string;
                        nullable: boolean;
                    };
                    secrets: {
                        type: string;
                        required: string[];
                        nullable: boolean;
                        properties: {
                            password: {
                                type: string;
                                nullable: boolean;
                                isSecret: {};
                            };
                        };
                    };
                    connectionLimit: {
                        type: string;
                        nullable: boolean;
                    };
                };
            };
        };
    } | {
        type: string;
        required: string[];
        properties: {
            integrationType: {
                const: IntegrationType;
            };
            connectionOptions: {
                type: string;
                nullable: boolean;
                required: string[];
                properties: {
                    connectionString: {
                        type: string;
                        nullable: boolean;
                    };
                    user: {
                        type: string;
                        nullable: boolean;
                    };
                    secrets: {
                        type: string;
                        nullable: boolean;
                        properties: {
                            password: {
                                type: string;
                                nullable: boolean;
                                isSecret: {};
                            };
                        };
                    };
                    maxPoolSize: {
                        type: string;
                        nullable: boolean;
                    };
                    minPoolSize: {
                        type: string;
                        nullable: boolean;
                    };
                    socketTimeoutMS: {
                        type: string;
                        nullable: boolean;
                    };
                    keepAlive: {
                        type: string;
                        nullable: boolean;
                    };
                    directConnection: {
                        type: string;
                        nullable: boolean;
                    };
                    ssl: {
                        type: string;
                        nullable: boolean;
                        required: string[];
                        properties: {
                            certificateFile: {
                                type: string;
                                nullable: boolean;
                            };
                            validate: {
                                type: string;
                                nullable: boolean;
                            };
                        };
                    };
                };
            };
        };
    } | {
        type: string;
        properties: {
            integrationType: {
                const: IntegrationType;
            };
            connectionOptions?: undefined;
        };
        required?: undefined;
    })[];
};
export declare const DiscoverGraphQLConnectionSchemaRequestSchema: {
    type: string;
    required: string[];
    properties: {
        integrationType: {
            const: IntegrationType;
        };
        connectionOptions: {
            type: string;
            nullable: boolean;
            required: string[];
            properties: {
                baseUrl: {
                    type: string;
                    nullable: boolean;
                    format: string;
                };
            };
        };
    };
};
export declare const UpdateAllowedHostsRequestSchema: {
    type: string;
    required: string[];
    properties: {
        allowedHosts: {
            type: string;
            nullable: boolean;
            minItems: number;
            items: {
                type: string;
                nullable: boolean;
            };
        };
    };
};
export declare const DiscoverOpenApiSchemaRequestSchema: {
    type: string;
    required: string[];
    properties: {
        discoveryOptions: {
            type: string;
            required: string[];
            properties: {
                openApiSpecUrl: {
                    type: string;
                    format: string;
                };
            };
        };
    };
};
