/**
 * This file contains general validators for the different objects being received from the client. The parameters are
 * usually of type 'any' to make sure there are no assumptions that the object has the correct type.
 * Also, this file should avoid importing from other files that are not for validation to avoid circular deps.
 */
import { OpenIdProvider } from '../application.types';
import { HttpStatus } from '../http-status.enum';
export type StatusCode = HttpStatus.BAD_REQUEST | HttpStatus.NOT_FOUND | HttpStatus.FORBIDDEN | HttpStatus.UNAUTHORIZED;
export declare class ValidationError extends Error {
    readonly statusCode: StatusCode;
    readonly details?: any;
    constructor(error: string, statusCode: StatusCode, details?: Record<string, any>);
}
export declare function validateFieldSort(fieldSort: any): void;
export declare function validateOpenIdProvider(openIdProvider: OpenIdProvider | undefined): OpenIdProvider;
export declare function validateOpenIdProviderType(providerType: any): void;
export declare function validateMutations(mutations: any): void;
export declare function validateQueryLimit(limit: any): void;
/** Returns true if the value is not an empty string (undefined/null are considered empty). */
export declare function isNotEmpty(value: string | undefined | null): value is string;
/**
 * All type names returned by 'typeof' supported by JavaScript:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof.
 * and a few other supported types.
 */
export type JavascriptTypeName = 'undefined' | 'object' | 'boolean' | 'number' | 'bigint' | 'string' | 'symbol' | 'function';
/** Returns true if 'typeof' of the 'value' is 'type' or 'type[]'. */
export declare function isRightType(value: unknown, type: JavascriptTypeName): boolean;
/** Returns true if 'obj' has only keys listed in the 'keys'. Object can't be an array. */
export declare function hasOnlyKeys(obj: object, keys: string[]): boolean;
