import { Auth, RunContext } from './context.types';
import { ServiceFunctionName } from './bundle-data.types';
import { SecretKey, SecretValue } from './secret.types';
export interface RunPermissions {
    hosts: Array<string>;
}
export interface ErrorResponse extends GeneralResponse {
    ok: false;
    error: string;
    details?: string;
}
export interface GeneralResponse {
    ok: boolean;
}
export interface RunConfiguration {
    codeUrl: string;
    codeUrlId: string;
    isSecurityRules: boolean;
    permissions: RunPermissions;
}
export interface RunConfigurationRequest {
    configuration: RunConfiguration;
    context: RunContext;
    auth: Auth | undefined;
    functionToRun: string;
    params: Array<unknown>;
    secrets?: RunSecrets;
    executeFunctionAnnotationType: ExecuteFunctionAnnotationType;
}
export type EvaluateRulesFunctionRequest = {
    functionName: ServiceFunctionName;
    params: Array<any>;
};
export interface LoadJsPayload {
    codeUrl: string;
}
export declare const executeFunctionSecureAnnotationType: Array<ExecuteFunctionAnnotationType>;
export type ExecuteFunctionSecureAnnotationType = 'secureQuery' | 'secureMutation' | 'secureNamedQuery' | 'secureGraphQL' | 'secureApi';
export type ExecuteFunctionAnnotationType = 'executable' | 'webhook' | 'scheduler' | 'trigger' | 'transformRead' | 'transformWrite' | 'metadata' | ExecuteFunctionSecureAnnotationType;
export interface ExecuteFunctionPayload {
    functionName: string;
    params: Array<unknown>;
    context: RunContext;
    auth: Auth | undefined;
    secrets?: Record<SecretKey, SecretValue>;
    backendApiKey: string;
    codeDir: string;
    executeFunctionAnnotationType: ExecuteFunctionAnnotationType;
}
export declare function transformParams(args: Array<any>, executeFunctionAnnotationType: ExecuteFunctionAnnotationType): unknown[];
export declare function transformResponse(functionResponse: any, executeFunctionAnnotationType: ExecuteFunctionAnnotationType): any;
export type WorkerActionType = 'loadJs' | 'executeFunction' | 'ping' | 'terminate';
export interface ActionRequest {
    action: WorkerActionType;
    payload?: LoadJsPayload | ExecuteFunctionPayload;
    traceContext?: any;
}
export type LoadJsResponse = GeneralResponse;
export type TerminateResponse = GeneralResponse;
export interface ExecuteFunctionResponse extends GeneralResponse {
    ok: true;
    functionResponse: unknown;
}
export interface RunSecrets {
    custom: Record<SecretKey, SecretValue>;
    backendApiKey: string;
}
