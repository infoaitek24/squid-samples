export type MetricRate = string;
export type MetricResolution = string;
export type MetricTimeWindow = {
    startTimeMs: number;
    endTimeMs: number;
};
export type MetricType = 'latency' | 'successful' | 'failure' | 'total';
export type MetricUnit = 'millisecond' | 'count';
export type MetricGroupName = 'backendBootstrap' | 'backendFunctionCall' | 'integrationConnectAttempt' | 'integrationReadOperation' | 'integrationWriteOperation';
/**
 * Filter key descriptions:
 * - `functionName` - Only supported by 'backendFunctionCall' metric. The name of the function.
 * - `integrationId` - Only supported by `integration*` metrics. The id of the integration.
 * - `resultType` - Only supported by all metrics. The result of the operation being either 'success' or 'failure'.
 */
export type MetricFilterKey = 'functionName' | 'integrationId' | 'resultType';
/**
 * Internal filters are automatically assigned and are not configurable through the open API.
 */
export type MetricInternalFilterKey = MetricFilterKey | 'appId' | 'operationType';
export type MetricFilterValue = string | number | boolean;
export type MetricFilterOperationType = 'read' | 'write';
export type MetricFilterResultType = 'success' | 'failure';
export type MetricInternalFilters = MetricFilters<MetricInternalFilterKey> & {
    operationType?: MetricFilterOperationType;
};
export type MetricFilters<T extends string> = {
    [key in T]?: MetricFilterValue;
} & {
    resultType?: MetricFilterResultType;
};
export interface MetricRequest {
    summary?: boolean;
    histogram?: {
        rate: MetricRate;
        resolution: MetricResolution;
    };
}
export interface GetMetricDataRequest {
    requests: Array<{
        filters: MetricFilters<MetricFilterKey>;
        metricGroup: MetricGroupName;
        metrics: {
            [key in MetricType]?: MetricRequest;
        };
    }>;
    timeWindow: MetricTimeWindow;
}
export type MetricHistogram = Array<{
    timestamp: Date;
    value: number;
}>;
export type MetricResponse = {
    unit: MetricUnit;
    summary?: number;
    histogram?: MetricHistogram;
};
export type GetMetricDataResponse = {
    results: Array<{
        metricGroup: MetricGroupName;
        metrics: {
            [key in MetricType]?: MetricResponse;
        };
    }>;
};
