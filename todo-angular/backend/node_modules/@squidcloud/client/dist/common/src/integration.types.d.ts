import { IntegrationId } from './communication.types';
import { FieldName } from './document.types';
import { IntrospectionQuery } from './graphql.types';
import { CollectionSchema } from './schema/schema.types';
export interface MongoConnectionSecretOptions {
    password?: string;
}
export interface MongoConnectionOptions {
    secrets: MongoConnectionSecretOptions;
    connectionString: string;
    user?: string;
    replicaSet?: string;
    ssl?: {
        certificateFile: string;
        validate: boolean;
    };
    maxPoolSize?: number;
    minPoolSize?: number;
    socketTimeoutMS?: number;
    serverSelectionTimeoutMS?: number;
    keepAlive?: boolean;
    directConnection?: boolean;
}
export interface MySqlConnectionSecretOptions {
    password: string;
}
export interface MssqlConnectionSecretOptions {
    password: string;
}
export interface PostgresConnectionSecretOptions {
    password: string;
    sslCertificate?: string;
}
export interface MySqlConnectionOptions {
    secrets: MySqlConnectionSecretOptions;
    host: string;
    user: string;
    database: string;
    connectionLimit?: number;
}
export interface MssqlConnectionOptions {
    secrets: MssqlConnectionSecretOptions;
    host: string;
    user: string;
    schema: string;
    database: string;
    connectionLimit?: number;
    sslEnabled?: boolean;
}
export interface PostgresConnectionOptions {
    host: string;
    user: string;
    database: string;
    schema?: string;
    sslEnabled?: boolean;
    secrets: PostgresConnectionSecretOptions;
}
export interface GraphQLConnectionOptions {
    baseUrl: string;
}
export interface OpenApiDiscoveryOptions {
    openApiSpecUrl: string;
}
export declare enum IntegrationType {
    'built_in_db' = "built_in_db",
    'mongo' = "mongo",
    'mysql' = "mysql",
    'mssql' = "mssql",
    'postgres' = "postgres",
    'cockroach' = "cockroach",
    'api' = "api",
    'openapi' = "openapi",
    'graphql' = "graphql"
}
export type DataIntegration = MySqlIntegration | MssqlIntegration | MongoIntegration | InternalIntegration | PostgresIntegration | CockroachIntegration;
export type Integration = DataIntegration | ApiIntegration | OpenApiIntegration | GraphQLIntegration;
type TableName = string;
export interface IntegrationDataSchema {
    collections: Record<TableName, CollectionSchema>;
}
export interface IntegrationGraphQLSchema {
    introspection: IntrospectionQuery;
}
export interface IntegrationApiSchema {
    baseUrl: string;
    endpoints: IntegrationApiEndpoints;
}
export type IntegrationApiEndpoints = Record<ApiEndpointId, ApiEndpoint>;
export type IntegrationSchema = IntegrationDataSchema | IntegrationGraphQLSchema;
interface BaseIntegration {
    id: IntegrationId;
    type: IntegrationType;
    creationDate: Date;
    updateDate: Date;
    secured: boolean;
}
export interface BaseDataIntegration extends BaseIntegration {
    schema?: IntegrationDataSchema;
    supportsExternalChanges: boolean;
}
export declare function isDataIntegration(integration: any): integration is BaseDataIntegration;
export declare function isDataIntegrationType(type: IntegrationType): boolean;
export type HttpMethod = 'post' | 'get' | 'delete' | 'patch' | 'put';
export type ApiEndpointId = string;
export type ApiParameterLocation = 'query' | 'body' | 'header' | 'path';
export type ResponseApiParameterLocation = 'header' | 'body';
export type FieldPath = string;
export interface ApiRequestField {
    location: ApiParameterLocation;
}
export interface ApiResponseField {
    location: ResponseApiParameterLocation;
    path?: FieldPath;
}
export interface ApiEndpoint {
    relativePath: string;
    method: HttpMethod;
    requestSchema?: Record<FieldName, ApiRequestField>;
    responseSchema?: Record<FieldPath, ApiResponseField>;
}
export interface BaseApiIntegration extends BaseIntegration {
    type: IntegrationType.api | IntegrationType.openapi;
    schema: IntegrationApiSchema;
}
export interface ApiIntegration extends BaseApiIntegration {
    type: IntegrationType.api;
}
export interface OpenApiIntegration extends BaseApiIntegration {
    type: IntegrationType.openapi;
    configuration: {
        discoveryOptions: OpenApiDiscoveryOptions;
    };
}
export interface GraphQLIntegration extends BaseIntegration {
    type: IntegrationType.graphql;
    schema?: IntegrationGraphQLSchema;
    configuration: {
        connectionOptions: GraphQLConnectionOptions;
    };
}
export interface MySqlIntegrationConfiguration {
    connectionOptions: MySqlConnectionOptions;
}
export interface MssqlIntegrationConfiguration {
    connectionOptions: MssqlConnectionOptions;
}
export interface PostgresIntegrationConfiguration {
    connectionOptions: PostgresConnectionOptions;
}
export interface MongoIntegrationConfiguration {
    connectionOptions: MongoConnectionOptions;
}
export interface MySqlIntegration extends BaseDataIntegration {
    type: IntegrationType.mysql;
    configuration: MySqlIntegrationConfiguration;
    schema: IntegrationDataSchema;
    supportsExternalChanges: true;
}
export interface MssqlIntegration extends BaseDataIntegration {
    type: IntegrationType.mssql;
    configuration: MssqlIntegrationConfiguration;
    schema: IntegrationDataSchema;
    supportsExternalChanges: true;
}
export interface BasePostgresIntegration extends BaseDataIntegration {
    type: IntegrationType.postgres | IntegrationType.cockroach;
    configuration: PostgresIntegrationConfiguration;
    schema: IntegrationDataSchema;
}
export interface PostgresIntegration extends BasePostgresIntegration {
    type: IntegrationType.postgres;
    supportsExternalChanges: true;
}
export interface CockroachIntegration extends BasePostgresIntegration {
    type: IntegrationType.cockroach;
    supportsExternalChanges: false;
}
export interface InternalIntegration extends BaseDataIntegration {
    type: IntegrationType.built_in_db;
}
export interface MongoIntegration extends BaseDataIntegration {
    type: IntegrationType.mongo;
    configuration: MongoIntegrationConfiguration;
    supportsExternalChanges: true;
}
export interface InternalIntegration extends BaseDataIntegration {
    type: IntegrationType.built_in_db;
}
export interface TestDataConnectionResponse {
    success: boolean;
    errorMessage?: string;
}
interface TestMongoDataConnectionRequest {
    type: IntegrationType.mongo;
    configuration: {
        connectionOptions: MongoConnectionOptions;
    };
}
interface TestMysqlDataConnectionRequest {
    type: IntegrationType.mysql;
    configuration: {
        connectionOptions: MySqlConnectionOptions;
    };
}
interface TestMssqlDataConnectionRequest {
    type: IntegrationType.mssql;
    configuration: {
        connectionOptions: MssqlConnectionOptions;
    };
}
interface TestPostgresDataConnectionRequest {
    type: IntegrationType.postgres;
    configuration: {
        connectionOptions: PostgresConnectionOptions;
    };
}
interface TestCockroachDataConnectionRequest {
    type: IntegrationType.cockroach;
    configuration: {
        connectionOptions: PostgresConnectionOptions;
    };
}
export type TestDataConnectionRequest = TestMongoDataConnectionRequest | TestMysqlDataConnectionRequest | TestMssqlDataConnectionRequest | TestCockroachDataConnectionRequest | TestPostgresDataConnectionRequest;
export interface DiscoverDataConnectionSchemaResponse {
    schema: IntegrationDataSchema;
}
export interface DiscoverGraphQLConnectionSchemaResponse {
    schema: IntegrationGraphQLSchema;
}
export interface DiscoverOpenApiSchemaResponse {
    schema: IntegrationApiSchema;
}
interface DiscoverMongoDataConnectionSchemaRequest {
    integrationType: IntegrationType.mongo;
    connectionOptions: MongoConnectionOptions;
}
interface DiscoverInternalDataConnectionSchemaRequest {
    integrationType: IntegrationType.built_in_db;
}
interface DiscoverMysqlDataConnectionSchemaRequest {
    integrationType: IntegrationType.mysql;
    connectionOptions: MySqlConnectionOptions;
}
interface DiscoverMssqlDataConnectionSchemaRequest {
    integrationType: IntegrationType.mssql;
    connectionOptions: MssqlConnectionOptions;
}
interface DiscoverPostgresDataConnectionSchemaRequest {
    integrationType: IntegrationType.postgres;
    connectionOptions: PostgresConnectionOptions;
}
interface DiscoverCockroachDataConnectionSchemaRequest {
    integrationType: IntegrationType.cockroach;
    connectionOptions: PostgresConnectionOptions;
}
export type DiscoverDataConnectionSchemaRequest = DiscoverMongoDataConnectionSchemaRequest | DiscoverInternalDataConnectionSchemaRequest | DiscoverMysqlDataConnectionSchemaRequest | DiscoverMssqlDataConnectionSchemaRequest | DiscoverCockroachDataConnectionSchemaRequest | DiscoverPostgresDataConnectionSchemaRequest;
export interface DiscoverGraphQLConnectionSchemaRequest {
    integrationType: IntegrationType.graphql;
    connectionOptions: GraphQLConnectionOptions;
}
export interface DiscoverOpenApiSchemaRequest {
    integrationType: IntegrationType.openapi;
    discoveryOptions: OpenApiDiscoveryOptions;
}
export {};
