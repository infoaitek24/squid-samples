import { ClientId, ClientRequestId, IntegrationId } from './communication.types';
import { CollectionName, DocTimestamp, SquidDocId, SquidDocument } from './document.types';
import { MutationType } from './mutation.types';
export type MessageId = string;
export type MessageFromClientType = 'acknowledge' | 'catchup' | 'kill';
interface BaseMessageFromClient {
    type: MessageFromClientType;
    payload?: unknown;
}
export interface AcknowledgeMessage extends BaseMessageFromClient {
    type: 'acknowledge';
    payload: Array<MessageId>;
}
export interface CatchupMessage extends BaseMessageFromClient {
    type: 'catchup';
}
export interface KillMessage extends BaseMessageFromClient {
    type: 'kill';
}
export type MessageFromClient = AcknowledgeMessage | CatchupMessage | KillMessage;
export type MessageToClientType = 'mutations' | 'query' | 'backendFunction' | 'api' | 'namedQuery';
interface BaseMessageToClient {
    type: MessageToClientType;
    messageId: MessageId;
    payload: unknown;
}
export interface BackendFunctionMessageToClient extends BaseMessageToClient {
    type: 'backendFunction';
    clientRequestId: ClientRequestId;
    payload: string;
}
export interface NamedQueryMessageToClient extends BaseMessageToClient {
    type: 'namedQuery';
    clientRequestId: ClientRequestId;
    payload: string;
}
export interface ApiResponseMessageToClient extends BaseMessageToClient {
    type: 'api';
    clientRequestId: ClientRequestId;
    success: boolean;
    httpStatus: number;
    payload: string;
}
export type MessageToClient = MutationsMessageToClient | QueryResultMessageToClient | BackendFunctionMessageToClient | NamedQueryMessageToClient | ApiResponseMessageToClient;
export interface MutationsMessageToClient extends BaseMessageToClient {
    type: 'mutations';
    payload: Array<MutationResultData>;
}
export interface MutationResultData {
    squidDocId: SquidDocId;
    clientRequestId: ClientRequestId;
    mutationType: MutationType;
    mutationTimestamp: DocTimestamp;
    doc: SquidDocument | undefined;
}
export interface QueryResultData {
    docs: Array<SquidDocument>;
    integrationId: IntegrationId;
    collectionName: CollectionName;
    clientRequestId: ClientRequestId;
}
export interface QueryResultMessageToClient extends BaseMessageToClient {
    type: 'query';
    payload: QueryResultData;
}
export type PendingMessage = Omit<MessageToClient, 'messageId'>;
export type PendingMessages = Record<ClientId, Array<PendingMessage>>;
export {};
