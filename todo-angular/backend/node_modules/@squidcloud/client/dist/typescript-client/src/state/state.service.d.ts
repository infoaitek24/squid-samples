import { Observable } from 'rxjs';
import { State, StateLeafNode } from './action.applier';
import { BaseAction } from './actions';
export declare class StateService {
    private readonly subscriptionsTree;
    private state;
    private batchCount;
    private readonly batchedActions;
    dispatch(action: BaseAction): void;
    runInBatch(fn: () => unknown): void;
    observePath<T>(path: string[], pathsToExcludeFn?: () => Array<string[]>): Observable<T>;
    setKeyInPath<T extends State>(path: string[], key: keyof T & string, value: T[keyof T] & StateLeafNode, noopIfSame?: boolean): void;
    setPartial<T extends State>(path: string[], partialState: Partial<T>, noopIfSame?: boolean): void;
    setInPath(path: string[], payload: StateLeafNode, noopIfSame?: boolean): void;
    pushToArray(path: string[], payload: StateLeafNode): void;
    deletePath(path: string[]): void;
    getState(): State;
    getStateInPath<T extends StateLeafNode>(path: string[]): T;
    destroy(): void;
    private getOrCreateSubjectForPath;
    private dispatchSubscriptions;
}
