import { ClientId, MessageFromClient, MessageToClient } from '@squidcloud/common';
import { Observable } from 'rxjs';
import { DestructManager } from './destruct.manager';
export interface SocketManagerInterface {
    observeNotifications(): Observable<MessageToClient>;
    observeConnectionReady(): Observable<boolean>;
    sendMessage(message: MessageFromClient): void;
}
export declare class SocketManager implements SocketManagerInterface {
    private readonly clientId;
    private readonly socketIoEndpoint;
    private readonly messageNotificationWrapper;
    private readonly destructManager;
    private readonly webSocketObserver;
    private readonly allMessagesObserver;
    private readonly connectionReady;
    private readonly seenMessageIds;
    private socket;
    private firstConnection;
    constructor(clientId: ClientId, socketIoEndpoint: string, messageNotificationWrapper: (fn: () => any) => any, destructManager: DestructManager);
    observeNotifications(): Observable<MessageToClient>;
    observeConnectionReady(): Observable<boolean>;
    sendMessage(message: MessageFromClient): void;
    private connect;
    private setupMessageAcknowledgments;
    private destruct;
}
