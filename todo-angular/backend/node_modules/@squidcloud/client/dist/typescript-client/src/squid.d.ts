import { ApiEndpointId, ApiKey, AppId, CollectionName, DocumentData, IntegrationId, QueryName, SupportedSquidRegion } from '@squidcloud/common';
import { CollectionReference } from './collection-reference';
import { GraphQLClient } from './graphql-client';
import { TransactionId } from './types';
export interface SquidOptions {
    messageNotificationWrapper?: (fn: () => any) => any;
    appId: AppId;
    apiKey?: ApiKey;
    region: SupportedSquidRegion;
    apiServerUrlOverrideMapping?: Record<IntegrationId, string>;
}
/** Reference to the squid db. Provides all the available actions on the DB. */
export declare class Squid {
    private readonly socketManager;
    private readonly clientId;
    private readonly rpcManager;
    private readonly dataManager;
    private readonly documentReferenceFactory;
    private readonly documentStore;
    private readonly lockManager;
    private readonly querySubscriptionManager;
    private readonly queryBuilderFactory;
    private readonly joinQueryBuilderFactory;
    private readonly collectionReferenceFactory;
    private readonly backendFunctionManager;
    private readonly namedQueryManager;
    private readonly apiManager;
    private readonly graphqlClientFactory;
    private readonly destructManager;
    private readonly documentIdentityService;
    private static readonly squidInstancesMap;
    constructor(options: SquidOptions);
    /**
     * This method is a factory method for creating a Squid instance
     */
    static getInstance(options: SquidOptions): Squid;
    static getInstances(): Array<Squid>;
    /**
     * Note: The following methods are bound using arrow functions to ensure that if a user accesses the methods via
     * destructuring (i.e. `{ setAuthIdToken } = squid`) then `this` will still be bound to the Squid class.
     */
    /**
     * Sets the auth id token (OpenId) that will be sent to the server and will be used for providing the Auth object
     * to the security rules.
     */
    setAuthIdToken: (idToken: string | undefined) => void;
    collection: <T extends DocumentData>(collectionName: CollectionName, integrationId?: IntegrationId) => CollectionReference<T>;
    runInTransaction: (fn: (transactionId: TransactionId) => Promise<void>) => Promise<void>;
    executeFunction: <T = any>(functionName: string, ...params: any[]) => Promise<T>;
    executeNamedQuery: <T = any>(integrationId: IntegrationId, queryName: QueryName, params: Record<string, any>) => Promise<T>;
    callApi: <T = any>(integrationId: IntegrationId, endpointId: ApiEndpointId, request?: Record<string, any>) => Promise<T>;
    graphql: (integrationId: IntegrationId) => GraphQLClient;
    destruct: () => Promise<void>;
    unsubscribe: () => Promise<void>;
}
