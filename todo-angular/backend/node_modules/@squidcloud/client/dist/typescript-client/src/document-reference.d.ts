import { DocumentData, IdResolutionMap, Paths, SquidDocId } from '@squidcloud/common';
import { Observable } from 'rxjs';
import { DataManager } from './data.manager';
import { QueryBuilderFactory } from './query/query-builder.factory';
import { TransactionId } from './types';
export declare class DocumentReference<T extends DocumentData = any> {
    private _squidDocId;
    private readonly dataManager;
    private readonly queryBuilderFactory;
    constructor(_squidDocId: SquidDocId, dataManager: DataManager, queryBuilderFactory: QueryBuilderFactory);
    get squidDocId(): SquidDocId;
    get data(): T;
    snapshot(): Promise<DocumentReference<T> | undefined>;
    snapshots(): Observable<DocumentReference<T> | undefined>;
    isDirty(): boolean;
    private isTracked;
    update(data: Partial<Record<Paths<T>, any>>, transactionId?: TransactionId): Promise<void>;
    setInPath(path: Paths<T>, value: any, transactionId?: TransactionId): Promise<void>;
    deleteInPath(path: Paths<T>, transactionId?: TransactionId): Promise<void>;
    insert(data: T, transactionId?: TransactionId): Promise<void>;
    delete(transactionId?: TransactionId): Promise<void>;
    migrateDocIds(idResolutionMap: IdResolutionMap): void;
}
