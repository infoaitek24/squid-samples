import { CollectionName, DocumentData, IntegrationId, SimpleQueryBuilder, SquidDocId } from '@squidcloud/common';
import { Observable } from 'rxjs';
import DocumentIdentityService from '../document-identity.service';
import { DocumentReference } from '../document-reference';
import { DocumentReferenceFactory } from '../document-reference.factory';
import { QuerySubscriptionManager } from './query-subscription.manager';
export declare class QueryBuilderFactory {
    private readonly querySubscriptionManager;
    private readonly documentReferenceFactory;
    private readonly documentIdentityService;
    constructor(querySubscriptionManager: QuerySubscriptionManager, documentReferenceFactory: DocumentReferenceFactory, documentIdentityService: DocumentIdentityService);
    getForDocument<DocumentType extends DocumentData>(squidDocId: SquidDocId): QueryBuilder<DocumentType>;
    get<DocumentType extends DocumentData>(collectionName: CollectionName, integrationId: IntegrationId): QueryBuilder<DocumentType>;
}
export declare class QueryBuilder<DocumentType extends DocumentData> extends SimpleQueryBuilder<DocumentType> {
    private readonly querySubscriptionManager;
    private readonly documentReferenceFactory;
    private readonly queryBuilderFactory;
    private readonly documentIdentityService;
    constructor(collectionName: CollectionName, integrationId: IntegrationId, querySubscriptionManager: QuerySubscriptionManager, documentReferenceFactory: DocumentReferenceFactory, queryBuilderFactory: QueryBuilderFactory, documentIdentityService: DocumentIdentityService);
    snapshot(): Promise<Array<DocumentReference<DocumentType>>>;
    snapshots(subscribe?: boolean): Observable<Array<DocumentReference<DocumentType>>>;
    changes(): Observable<Changes<DocumentType>>;
    get hash(): string;
}
export interface Changes<DocumentType extends DocumentData> {
    inserts: Array<DocumentReference<DocumentType>>;
    updates: Array<DocumentReference<DocumentType>>;
    deletes: Array<DocumentType>;
}
