import { ApiKey } from '@squidcloud/common';
import { DestructManager } from './destruct.manager';
import { SocketManagerInterface } from './socket.manager';
export declare class RpcManager {
    private readonly rpcEndpoint;
    private readonly socketManager;
    private readonly staticHeaders;
    private readonly onGoingRpcsCounter;
    constructor(rpcEndpoint: string, socketManager: SocketManagerInterface, destructManager: DestructManager, apiKey?: ApiKey);
    awaitAllSettled(): Promise<void>;
    setStaticHeader(key: string, value: string): void;
    deleteStaticHeader(key: string): void;
    getEndpoint(): string;
    getStaticHeaders(): Record<string, string>;
    post<T>(path: string, message: any): Promise<T>;
}
export declare class RpcError extends Error {
    readonly statusCode: number;
    readonly statusText: string;
    readonly headers: Headers;
    readonly url: string;
    readonly body: string;
    constructor(statusCode: number, statusText: string, headers: Headers, url: string, body: string);
}
