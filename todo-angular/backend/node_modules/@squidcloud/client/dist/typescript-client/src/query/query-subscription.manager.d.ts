import { ClientId, ClientRequestId, Query, QuerySubscriptionId, SquidDocId, SquidDocument } from '@squidcloud/common';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { DestructManager } from '../destruct.manager';
import DocumentIdentityService from '../document-identity.service';
import { DocumentStore } from '../document-store';
import { RpcManager } from '../rpc.manager';
import { Alias, JoinCondition } from './query.types';
export declare class QuerySubscriptionManager {
    private readonly rpcManager;
    private readonly clientId;
    private readonly documentStore;
    private readonly destructManager;
    private readonly documentIdentityService;
    readonly safeToSendQueriesToServer: BehaviorSubject<boolean>;
    onOrphanDocuments: Subject<string[]>;
    private readonly ongoingQueries;
    private readonly inflightQueriesCount;
    /**
     * The two maps below maintain the relation between document ids we know about locally to clientRequestIds (queries).
     * This relation is used for determining whether a document can be safely removed.
     */
    private readonly clientRequestIdToLocalDocuments;
    private readonly localDocumentToClientRequestIds;
    private readonly queryMappingManager;
    constructor(rpcManager: RpcManager, clientId: ClientId, documentStore: DocumentStore, destructManager: DestructManager, documentIdentityService: DocumentIdentityService);
    hasOngoingQuery(clientRequestId: ClientRequestId): boolean;
    getQuery(clientRequestId: ClientRequestId): Query;
    setGotResponseFromServer(clientRequestId: ClientRequestId): void;
    findQueriesForDocument(doc: SquidDocument, squidDocId: SquidDocId): Array<QuerySubscriptionId>;
    /**
     * Given the new document's properties, finds all the queries that should be notified with the new properties and
     * updates the internal mappings (squidDocId --> client request Ids and, clientRequestId --> squidDocIds).
     * Returns an array with all the previous and current client request ids (basically all the client request ids that
     * will need to be notified due to the change of properties).
     */
    setClientRequestIdsForLocalDoc(squidDocId: SquidDocId, properties: SquidDocument | undefined): Array<ClientRequestId>;
    errorOutAllQueries(squidDocId: SquidDocId, err: any): void;
    notifyAllSubscriptions(clientRequestIds: ClientRequestId[]): void;
    processQuery(query: Query, rootAlias: Alias, joins: Record<string, Query>, joinConditions: Record<Alias, JoinCondition>, subscribe: boolean): Observable<Array<Record<Alias, SquidDocument | undefined>>>;
    hasOngoingQueryForDocId(squidDocId: string): boolean;
    private removeClientRequestId;
    waitForAllQueriesToFinish(): Promise<void>;
    private registerQueryFinalizer;
    /** Creates a graph of ongoing queries and returns the root of the graph. */
    private createOngoingQueryGraph;
    private collectAllObservables;
    private joinResults;
    private join;
    private getOngoingQueriesBfs;
    private updateOngoingQueryWithNewDataFromSupportingQuery;
    private allOngoingQueriesGotServerResult;
    private completeAllSupportedQueries;
    private predestruct;
    unsubscribe(): void;
    hasSubscription(clientRequestId: ClientRequestId): boolean;
    /** Sends the query request to the server and makes sure to unsubscribe once the subject completes. */
    private sendQueryToServer;
    private migrateDocIds;
}
