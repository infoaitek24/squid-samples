import { ClientRequestId, CollectionName, DocId, IntegrationId, LockManager, MutationType, SquidDocument } from '@squidcloud/common';
import { Subject, Subscription } from 'rxjs';
import { CollectionReference } from '../collection-reference';
import { CollectionReferenceFactory } from '../collection-reference.factory';
import { DataManager } from '../data.manager';
import { DestructManager } from '../destruct.manager';
import DocumentIdentityService from '../document-identity.service';
import { DocumentReferenceFactory } from '../document-reference.factory';
import { DocumentStore } from '../document-store';
import { MutationSender } from '../mutation/mutation-sender';
import { JoinQueryBuilderFactory } from '../query/join-query-builder.factory';
import { QueryBuilderFactory } from '../query/query-builder.factory';
import { QuerySubscriptionManager } from '../query/query-subscription.manager';
import { FakeRpcManager } from './fake-rpc.manager';
import { FakeSocketManager } from './fake-socket.manager';
export type TestDocTypeA = {
    a: number;
    b?: {
        c: number;
    };
};
export type TestDocTypeB = {
    b: number;
    c?: {
        d: number;
    };
};
export type QueryResponse = {
    resCount: number;
    results: Array<TestDocTypeA> | undefined;
    receivedSubject: Subject<void>;
};
export type JoinQueryResponse = {
    resCount: number;
    results: Array<{
        a: TestDocTypeA;
        b: TestDocTypeB | undefined;
    }> | undefined;
    receivedSubject: Subject<void>;
    subscription: Subscription;
};
export declare class SquidEnvSetup {
    readonly querySubscriptionManager: QuerySubscriptionManager;
    readonly socketManager: FakeSocketManager;
    readonly rpcManager: FakeRpcManager;
    readonly documentStore: DocumentStore;
    readonly documentReferenceFactory: DocumentReferenceFactory;
    readonly collectionReferenceFactory: CollectionReferenceFactory;
    readonly queryBuilderFactory: QueryBuilderFactory;
    readonly joinQueryBuilderFactory: JoinQueryBuilderFactory;
    readonly lockManager: LockManager;
    readonly mutationSender: MutationSender;
    readonly dataManager: DataManager;
    readonly clientId = "fakeClientId";
    readonly destructManager: DestructManager;
    readonly documentIdentityService: DocumentIdentityService;
    readonly collectionA: CollectionReference<TestDocTypeA>;
    readonly collectionB: CollectionReference<TestDocTypeB>;
    constructor();
    simulateQueryResponse(docs: Array<Partial<SquidDocument>>, collectionName: CollectionName, integrationId?: IntegrationId, clientRequestId?: ClientRequestId): void;
    simulateMutationsResponse(updates: Array<{
        mutationType: MutationType;
        collectionName: CollectionName;
        integrationId?: IntegrationId;
        clientRequestId?: ClientRequestId;
        doc: Partial<SquidDocument> & {
            __docId__: DocId;
        };
    }>, mutationsTimestamp?: number): Promise<void>;
    simulateErrorResponse(message: string): void;
    runAsync(fn: () => any): Promise<void>;
    getBuiltInDocId(idValue: string): string;
    executeQueryOnCollectionA(subscribe?: boolean): QueryResponse;
    executeJoinQuery(subscribe?: boolean): JoinQueryResponse;
    simulateResponseForCollectionA(id?: string, a?: number): void;
    simulateResponseForCollectionB(id: string, b: number): void;
}
export declare let squidEnvSetup: SquidEnvSetup;
export declare function squidEnvSetupBeforeEach(): void;
