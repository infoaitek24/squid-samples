import { CollectionName, DocumentData, FieldName, IntegrationId, Operator, PrimitiveFieldType, Query } from '@squidcloud/common';
import { Observable } from 'rxjs';
import { DocumentReference } from '../document-reference';
import { DocumentReferenceFactory } from '../document-reference.factory';
import { QueryBuilderFactory } from './query-builder.factory';
import { QuerySubscriptionManager } from './query-subscription.manager';
import { Alias } from './query.types';
export declare class JoinQueryBuilderFactory {
    private readonly querySubscriptionManager;
    private readonly documentReferenceFactory;
    private readonly queryBuilderFactory;
    constructor(querySubscriptionManager: QuerySubscriptionManager, documentReferenceFactory: DocumentReferenceFactory, queryBuilderFactory: QueryBuilderFactory);
    getForJoin<DocumentType extends DocumentData, MyAlias extends Alias, ReturnType extends Record<MyAlias, DocumentReference<DocumentType>>>(collectionName: CollectionName, integrationId: IntegrationId, alias: MyAlias): JoinQueryBuilder<DocumentType, MyAlias, ReturnType>;
}
export declare class JoinQueryBuilder<DocumentType extends DocumentData, MyAlias extends Alias, ReturnType extends Record<MyAlias, DocumentReference<DocumentType> | undefined>> {
    private readonly collectionName;
    private readonly integrationId;
    private readonly querySubscriptionManager;
    private readonly documentReferenceFactory;
    private readonly alias;
    private readonly joinQueryBuilderFactory;
    private readonly queryBuilderFactory;
    private readonly simpleQueryBuilder;
    private readonly joins;
    /** Record that maps the right alias to the left condition */
    private readonly joinConditions;
    constructor(collectionName: CollectionName, integrationId: IntegrationId, querySubscriptionManager: QuerySubscriptionManager, documentReferenceFactory: DocumentReferenceFactory, alias: MyAlias, joinQueryBuilderFactory: JoinQueryBuilderFactory, queryBuilderFactory: QueryBuilderFactory);
    where(fieldName: (keyof DocumentType & FieldName) | string, operator: Operator | 'in' | 'not in', value: PrimitiveFieldType | Array<PrimitiveFieldType>): this;
    limit(limit: number): this;
    sortBy(fieldName: keyof DocumentType & FieldName, asc?: boolean): this;
    join<J extends DocumentData, RightAlias extends Alias, RightReturnType extends Record<RightAlias, DocumentReference<J> | undefined>>(queryBuilder: JoinQueryBuilder<J, RightAlias, RightReturnType>, leftFieldName: keyof DocumentType & FieldName, rightFieldName: keyof J & FieldName): JoinQueryBuilder<DocumentType, MyAlias, ReturnType & Partial<RightReturnType>>;
    snapshot(): Promise<Array<ReturnType>>;
    snapshots(subscribe?: boolean): Observable<Array<ReturnType>>;
    build(): Query;
}
